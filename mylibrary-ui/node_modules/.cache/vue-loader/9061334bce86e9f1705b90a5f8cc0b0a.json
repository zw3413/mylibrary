{"remainingRequest":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/weizhang/JAVASHOP/mylibrary-ui/src/module/viewer/page/txt.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/src/module/viewer/page/txt.vue","mtime":1578067146000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n   import Vue from 'vue';\n   import { mapState } from 'vuex';\n   import axios from 'axios';\n   import localEvent from '@/store/local';\n   import TopNav from '../component/TopNav';\n   import BottomNav from '../component/BottomNav';\n   import FontNav from '../component/FontNav';\n//   import ListPanel from '../component/ListPanel';\n   import Cover from '../component/Cover';\n   import Loading from '../component/Loading';\n\n   export default {\n       data() {\n           return {\n               bar: false,\n               timer: null,\n               title: '',\n               content: [],\n               loading: false,\n               showList: false,\n               booksReadInfo: {},\n           };\n       },\n       components: {\n           TopNav,\n           BottomNav,\n           FontNav,\n     //      ListPanel,\n           Cover,\n           Loading,\n       },\n       created() {\n           // //判断本地是否存储了阅读器文字大小\n           // if (localEvent.StorageGetter('fz_size')) {\n           //     this.$store.state.fz_size = localEvent.StorageGetter('fz_size');\n           // }\n           // //判断本地是否存储了阅读器主题色\n           // if (localEvent.StorageGetter('bg_color')) {\n           //     this.$store.state.bg_color = localEvent.StorageGetter('bg_color');\n           // }\n\n           // //加载时从localStorage中回去所有数据阅读进度\n           // const localBookReaderInfo = localEvent.StorageGetter('bookreaderinfo');\n           // let id = this.$route.params.id;\n\n           // //当前书籍以前读过并有阅读进度\n           // if (localBookReaderInfo && localBookReaderInfo[id]) {\n           //     this.booksReadInfo = localEvent.StorageGetter('bookreaderinfo');\n           //     //this.getData(id, this.booksReadInfo[id].chapter);\n           //     this.$store.dispatch('curChapter', this.booksReadInfo[id].chapter);\n           // } else {\n           //     //当前书籍没有读过但是localStorage保存了其他书籍进度\n           //     if (localBookReaderInfo) {\n           //         this.booksReadInfo = localBookReaderInfo;\n           //         this.getData(id, 1);\n           //         this.$store.dispatch('curChapter', 1);\n           //     } else {\n           //         //第一次进入阅读\n           //         this.booksReadInfo[id] = {\n           //             book: id,\n           //             chapter: 1,\n           //         };\n           //         this.getData(id, 1);\n           //         this.$store.dispatch('curChapter', 1);\n           //     }\n           // }\n\n           //第一次进入阅读\n           let id=1;\n           this.booksReadInfo[id] = {\n               book: id,\n               chapter: 1,\n           };\n           this.getData(id, 1);\n           this.$store.dispatch('curChapter', 1);\n       },\n       mounted() {\n           //因为要获取dom元素，所以不能放到created中\n           this.$refs.fz_size.style.fontSize = this.fz_size + 'px';\n       },\n       methods: {\n           //切换上下工具栏，如果字体面板显示点击也关闭\n           clickBar() {\n               this.$store.dispatch('toggleBar');\n               this.$store.state.font_panel = false;\n           },\n           //向上翻页\n           pageUp() {\n               let target = document.body.scrollTop - window.screen.height - 80;\n               this.startScroll(target, -20);\n           },\n           //向下翻页\n           pageDown() {\n               let target = document.body.scrollTop + window.screen.height - 80;\n               this.startScroll(target, 20);\n           },\n           startScroll(target, speed) {\n               let times = null;\n               times = setInterval(function() {\n                   if (speed > 0) {\n                       if (document.body.scrollTop <= target) {\n                           document.body.scrollTop += speed;\n                       }\n                       if (\n                           document.body.scrollTop > target ||\n                           document.body.scrollTop + window.screen.height >=\n                           document.body.scrollHeight\n                       ) {\n                           clearInterval(times);\n                       }\n                   } else {\n                       if (document.body.scrollTop >= target) {\n                           document.body.scrollTop += speed;\n                       }\n                       if (\n                           document.body.scrollTop < target ||\n                           document.body.scrollTop <= 0\n                       ) {\n                           clearInterval(times);\n                       }\n                   }\n               }, 1);\n           },\n           getData(id, chapter) {\n               this.loading = true;\n               debugger\n               axios\n                   .get(`${this.common.api}/book?book=${id}&id=${chapter}`)\n                   .then(data => {\n                       this.loading = false; //获取完毕后隐藏动画\n                       this.title = data.data.title;\n                       this.content = data.data.content.split('-');\n                   });\n               this.$store.state.windowHeight = window.screen.height;\n           },\n           prevChapter() {\n               this.$store.dispatch('prevChapter');\n               this.saveBooksInfo();\n               setTimeout(() => {\n                   document.body.scrollTop = 0;\n               }, 300);\n           },\n           //更换章节时保存阅读进度到localStorage\n           nextChapter() {\n               this.$store.dispatch('nextChapter', 50);\n               this.saveBooksInfo();\n               setTimeout(() => {\n                   document.body.scrollTop = 0;\n               }, 300);\n           },\n           saveBooksInfo() {\n               //可用localStorage保存每本小说阅读进度\n               let id = this.$route.params.id;\n               this.booksReadInfo[id] = {\n                   book: id,\n                   chapter: this.curChapter,\n               };\n               localEvent.StorageSetter('bookreaderinfo', this.booksReadInfo);\n           },\n           page(e) {\n               if (e.keyCode === 39) {\n                   console.log(this.nextChapter);\n                   this.nextChapter();\n               } else if (e.keyCode === 37) {\n                   this.prevChapter();\n               }\n           },\n       },\n       computed: {\n           ...mapState([\n               'font_panel',\n               'bg_color',\n               'fz_size',\n               'bg_night',\n               'curChapter',\n               'windowHeight',\n               'list_panel',\n           ]),\n       },\n       watch: {\n           //监听fz_size的值更改背景色\n           fz_size(val, oldVal) {\n               this.$refs.fz_size.style.fontSize = val + 'px';\n               localEvent.StorageSetter('fz_size', val);\n           },\n           //监听当前章节的改变，保存到本地并获取数据\n           curChapter(val, oldVal) {\n               localEvent.StorageSetter('cur_chapter', val);\n               this.saveBooksInfo();\n               this.getData(this.$route.params.id, val);\n           },\n       },\n   };\n",null]}