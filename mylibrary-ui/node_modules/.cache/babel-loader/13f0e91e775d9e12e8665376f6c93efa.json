{"remainingRequest":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/web/preferences.js","dependencies":[{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/web/preferences.js","mtime":1577806166000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BasePreferences = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/@babel/runtime/regenerator\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* Copyright 2013 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar defaultPreferences = null;\n\nfunction getDefaultPreferences() {\n  if (!defaultPreferences) {\n    if (typeof PDFJSDev !== 'undefined' && PDFJSDev.test('PRODUCTION')) {\n      defaultPreferences = Promise.resolve(PDFJSDev.json('$ROOT/build/default_preferences.json'));\n    } else {\n      defaultPreferences = new Promise(function (resolve, reject) {\n        if ((typeof SystemJS === \"undefined\" ? \"undefined\" : _typeof(SystemJS)) === 'object') {\n          SystemJS.import('./app_options').then(resolve, reject);\n        } else if (typeof require === 'function') {\n          try {\n            resolve(require('./app_options.js'));\n          } catch (ex) {\n            reject(ex);\n          }\n        } else {\n          reject(new Error('SystemJS or CommonJS must be used to load AppOptions.'));\n        }\n      }).then(function (_ref) {\n        var AppOptions = _ref.AppOptions,\n            OptionKind = _ref.OptionKind;\n        return AppOptions.getAll(OptionKind.PREFERENCE);\n      });\n    }\n  }\n\n  return defaultPreferences;\n}\n/**\n * BasePreferences - Abstract base class for storing persistent settings.\n *   Used for settings that should be applied to all opened documents,\n *   or every time the viewer is loaded.\n */\n\n\nvar BasePreferences =\n/*#__PURE__*/\nfunction () {\n  function BasePreferences() {\n    var _this = this;\n\n    _classCallCheck(this, BasePreferences);\n\n    if (this.constructor === BasePreferences) {\n      throw new Error('Cannot initialize BasePreferences.');\n    }\n\n    this.prefs = null;\n    this._initializedPromise = getDefaultPreferences().then(function (defaults) {\n      Object.defineProperty(_this, 'defaults', {\n        value: Object.freeze(defaults),\n        writable: false,\n        enumerable: true,\n        configurable: false\n      });\n      _this.prefs = Object.assign(Object.create(null), defaults);\n      return _this._readFromStorage(defaults);\n    }).then(function (prefs) {\n      if (!prefs) {\n        return;\n      }\n\n      for (var name in prefs) {\n        var defaultValue = _this.defaults[name],\n            prefValue = prefs[name]; // Ignore preferences not present in, or whose types don't match,\n        // the default values.\n\n        if (defaultValue === undefined || _typeof(prefValue) !== _typeof(defaultValue)) {\n          continue;\n        }\n\n        _this.prefs[name] = prefValue;\n      }\n    });\n  }\n  /**\n   * Stub function for writing preferences to storage.\n   * @param {Object} prefObj The preferences that should be written to storage.\n   * @returns {Promise} A promise that is resolved when the preference values\n   *                    have been written.\n   */\n\n\n  _createClass(BasePreferences, [{\n    key: \"_writeToStorage\",\n    value: function () {\n      var _writeToStorage2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(prefObj) {\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                throw new Error('Not implemented: _writeToStorage');\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function _writeToStorage(_x) {\n        return _writeToStorage2.apply(this, arguments);\n      }\n\n      return _writeToStorage;\n    }()\n    /**\n     * Stub function for reading preferences from storage.\n     * @param {Object} prefObj The preferences that should be read from storage.\n     * @returns {Promise} A promise that is resolved with an {Object} containing\n     *                    the preferences that have been read.\n     */\n\n  }, {\n    key: \"_readFromStorage\",\n    value: function () {\n      var _readFromStorage2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2(prefObj) {\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                throw new Error('Not implemented: _readFromStorage');\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function _readFromStorage(_x2) {\n        return _readFromStorage2.apply(this, arguments);\n      }\n\n      return _readFromStorage;\n    }()\n    /**\n     * Reset the preferences to their default values and update storage.\n     * @returns {Promise} A promise that is resolved when the preference values\n     *                    have been reset.\n     */\n\n  }, {\n    key: \"reset\",\n    value: function () {\n      var _reset = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee3() {\n        return _regenerator.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this._initializedPromise;\n\n              case 2:\n                this.prefs = Object.assign(Object.create(null), this.defaults);\n                return _context3.abrupt(\"return\", this._writeToStorage(this.defaults));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function reset() {\n        return _reset.apply(this, arguments);\n      }\n\n      return reset;\n    }()\n    /**\n     * Set the value of a preference.\n     * @param {string} name The name of the preference that should be changed.\n     * @param {boolean|number|string} value The new value of the preference.\n     * @returns {Promise} A promise that is resolved when the value has been set,\n     *                    provided that the preference exists and the types match.\n     */\n\n  }, {\n    key: \"set\",\n    value: function () {\n      var _set = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee4(name, value) {\n        var defaultValue, valueType, defaultType;\n        return _regenerator.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._initializedPromise;\n\n              case 2:\n                defaultValue = this.defaults[name];\n\n                if (!(defaultValue === undefined)) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                throw new Error(\"Set preference: \\\"\".concat(name, \"\\\" is undefined.\"));\n\n              case 7:\n                if (!(value === undefined)) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                throw new Error('Set preference: no value is specified.');\n\n              case 9:\n                valueType = _typeof(value);\n                defaultType = _typeof(defaultValue);\n\n                if (!(valueType !== defaultType)) {\n                  _context4.next = 19;\n                  break;\n                }\n\n                if (!(valueType === 'number' && defaultType === 'string')) {\n                  _context4.next = 16;\n                  break;\n                }\n\n                value = value.toString();\n                _context4.next = 17;\n                break;\n\n              case 16:\n                throw new Error(\"Set preference: \\\"\".concat(value, \"\\\" is a \").concat(valueType, \", \") + \"expected a \".concat(defaultType, \".\"));\n\n              case 17:\n                _context4.next = 21;\n                break;\n\n              case 19:\n                if (!(valueType === 'number' && !Number.isInteger(value))) {\n                  _context4.next = 21;\n                  break;\n                }\n\n                throw new Error(\"Set preference: \\\"\".concat(value, \"\\\" must be an integer.\"));\n\n              case 21:\n                this.prefs[name] = value;\n                return _context4.abrupt(\"return\", this._writeToStorage(this.prefs));\n\n              case 23:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function set(_x3, _x4) {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }()\n    /**\n     * Get the value of a preference.\n     * @param {string} name The name of the preference whose value is requested.\n     * @returns {Promise} A promise resolved with a {boolean|number|string}\n     *                    containing the value of the preference.\n     */\n\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee5(name) {\n        var defaultValue, prefValue;\n        return _regenerator.default.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._initializedPromise;\n\n              case 2:\n                defaultValue = this.defaults[name];\n\n                if (!(defaultValue === undefined)) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                throw new Error(\"Get preference: \\\"\".concat(name, \"\\\" is undefined.\"));\n\n              case 7:\n                prefValue = this.prefs[name];\n\n                if (!(prefValue !== undefined)) {\n                  _context5.next = 10;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", prefValue);\n\n              case 10:\n                return _context5.abrupt(\"return\", defaultValue);\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function get(_x5) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n    /**\n     * Get the values of all preferences.\n     * @returns {Promise} A promise that is resolved with an {Object} containing\n     *                    the values of all preferences.\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function () {\n      var _getAll = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee6() {\n        return _regenerator.default.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._initializedPromise;\n\n              case 2:\n                return _context6.abrupt(\"return\", Object.assign(Object.create(null), this.defaults, this.prefs));\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getAll() {\n        return _getAll.apply(this, arguments);\n      }\n\n      return getAll;\n    }()\n  }]);\n\n  return BasePreferences;\n}();\n\nexports.BasePreferences = BasePreferences;",null]}