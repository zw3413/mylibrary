{"remainingRequest":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/thread-loader/dist/cjs.js!/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/src/core/image_utils.js","dependencies":[{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/src/core/image_utils.js","mtime":1572199794000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/* Copyright 2019 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint no-var: error */\nimport { ColorSpace } from './colorspace';\nimport { JpegStream } from './jpeg_stream';\nimport { Stream } from './stream';\n\nvar NativeImageDecoder =\n/*#__PURE__*/\nfunction () {\n  function NativeImageDecoder(_ref) {\n    var xref = _ref.xref,\n        resources = _ref.resources,\n        handler = _ref.handler,\n        _ref$forceDataSchema = _ref.forceDataSchema,\n        forceDataSchema = _ref$forceDataSchema === void 0 ? false : _ref$forceDataSchema,\n        pdfFunctionFactory = _ref.pdfFunctionFactory;\n\n    _classCallCheck(this, NativeImageDecoder);\n\n    this.xref = xref;\n    this.resources = resources;\n    this.handler = handler;\n    this.forceDataSchema = forceDataSchema;\n    this.pdfFunctionFactory = pdfFunctionFactory;\n  }\n\n  _createClass(NativeImageDecoder, [{\n    key: \"canDecode\",\n    value: function canDecode(image) {\n      return image instanceof JpegStream && NativeImageDecoder.isDecodable(image, this.xref, this.resources, this.pdfFunctionFactory);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(image) {\n      // For natively supported JPEGs send them to the main thread for decoding.\n      var dict = image.dict;\n      var colorSpace = dict.get('ColorSpace', 'CS');\n      colorSpace = ColorSpace.parse(colorSpace, this.xref, this.resources, this.pdfFunctionFactory);\n      return this.handler.sendWithPromise('JpegDecode', [image.getIR(this.forceDataSchema), colorSpace.numComps]).then(function (_ref2) {\n        var data = _ref2.data,\n            width = _ref2.width,\n            height = _ref2.height;\n        return new Stream(data, 0, data.length, dict);\n      });\n    }\n    /**\n     * Checks if the image can be decoded and displayed by the browser without any\n     * further processing such as color space conversions.\n     */\n\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported(image, xref, res, pdfFunctionFactory) {\n      var dict = image.dict;\n\n      if (dict.has('DecodeParms') || dict.has('DP')) {\n        return false;\n      }\n\n      var cs = ColorSpace.parse(dict.get('ColorSpace', 'CS'), xref, res, pdfFunctionFactory); // isDefaultDecode() of DeviceGray and DeviceRGB needs no `bpc` argument.\n\n      return (cs.name === 'DeviceGray' || cs.name === 'DeviceRGB') && cs.isDefaultDecode(dict.getArray('Decode', 'D'));\n    }\n    /**\n     * Checks if the image can be decoded by the browser.\n     */\n\n  }, {\n    key: \"isDecodable\",\n    value: function isDecodable(image, xref, res, pdfFunctionFactory) {\n      var dict = image.dict;\n\n      if (dict.has('DecodeParms') || dict.has('DP')) {\n        return false;\n      }\n\n      var cs = ColorSpace.parse(dict.get('ColorSpace', 'CS'), xref, res, pdfFunctionFactory);\n      var bpc = dict.get('BitsPerComponent', 'BPC') || 1;\n      return (cs.numComps === 1 || cs.numComps === 3) && cs.isDefaultDecode(dict.getArray('Decode', 'D'), bpc);\n    }\n  }]);\n\n  return NativeImageDecoder;\n}();\n\nexport { NativeImageDecoder };",null]}