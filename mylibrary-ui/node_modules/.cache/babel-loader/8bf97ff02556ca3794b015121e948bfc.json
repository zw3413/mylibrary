{"remainingRequest":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/weizhang/JAVASHOP/vue-admin-template-master/src/statics/viewer/pdf/web/overlay_manager.js","dependencies":[{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/src/statics/viewer/pdf/web/overlay_manager.js","mtime":1577806166000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OverlayManager = void 0;\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime-corejs2/helpers/createClass\"));\n\n/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar OverlayManager =\n/*#__PURE__*/\nfunction () {\n  function OverlayManager() {\n    (0, _classCallCheck2.default)(this, OverlayManager);\n    this._overlays = {};\n    this._active = null;\n    this._keyDownBound = this._keyDown.bind(this);\n  }\n\n  (0, _createClass2.default)(OverlayManager, [{\n    key: \"register\",\n\n    /**\n     * @param {string} name - The name of the overlay that is registered.\n     * @param {HTMLDivElement} element - The overlay's DOM element.\n     * @param {function} [callerCloseMethod] - The method that, if present, calls\n     *                   `OverlayManager.close` from the object registering the\n     *                   overlay. Access to this method is necessary in order to\n     *                   run cleanup code when e.g. the overlay is force closed.\n     *                   The default is `null`.\n     * @param {boolean} [canForceClose] - Indicates if opening the overlay closes\n     *                  an active overlay. The default is `false`.\n     * @returns {Promise} A promise that is resolved when the overlay has been\n     *                    registered.\n     */\n    value: function () {\n      var _register = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(name, element) {\n        var callerCloseMethod,\n            canForceClose,\n            container,\n            _args = arguments;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                callerCloseMethod = _args.length > 2 && _args[2] !== undefined ? _args[2] : null;\n                canForceClose = _args.length > 3 && _args[3] !== undefined ? _args[3] : false;\n\n                if (!(!name || !element || !(container = element.parentNode))) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error('Not enough parameters.');\n\n              case 6:\n                if (!this._overlays[name]) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error('The overlay is already registered.');\n\n              case 8:\n                this._overlays[name] = {\n                  element: element,\n                  container: container,\n                  callerCloseMethod: callerCloseMethod,\n                  canForceClose: canForceClose\n                };\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function register(_x, _x2) {\n        return _register.apply(this, arguments);\n      }\n\n      return register;\n    }()\n    /**\n     * @param {string} name - The name of the overlay that is unregistered.\n     * @returns {Promise} A promise that is resolved when the overlay has been\n     *                    unregistered.\n     */\n\n  }, {\n    key: \"unregister\",\n    value: function () {\n      var _unregister = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(name) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this._overlays[name]) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new Error('The overlay does not exist.');\n\n              case 4:\n                if (!(this._active === name)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                throw new Error('The overlay cannot be removed while it is active.');\n\n              case 6:\n                delete this._overlays[name];\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function unregister(_x3) {\n        return _unregister.apply(this, arguments);\n      }\n\n      return unregister;\n    }()\n    /**\n     * @param {string} name - The name of the overlay that should be opened.\n     * @returns {Promise} A promise that is resolved when the overlay has been\n     *                    opened.\n     */\n\n  }, {\n    key: \"open\",\n    value: function () {\n      var _open = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(name) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this._overlays[name]) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                throw new Error('The overlay does not exist.');\n\n              case 4:\n                if (!this._active) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                if (!this._overlays[name].canForceClose) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                this._closeThroughCaller();\n\n                _context3.next = 14;\n                break;\n\n              case 9:\n                if (!(this._active === name)) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                throw new Error('The overlay is already active.');\n\n              case 13:\n                throw new Error('Another overlay is currently active.');\n\n              case 14:\n                this._active = name;\n\n                this._overlays[this._active].element.classList.remove('hidden');\n\n                this._overlays[this._active].container.classList.remove('hidden');\n\n                window.addEventListener('keydown', this._keyDownBound);\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function open(_x4) {\n        return _open.apply(this, arguments);\n      }\n\n      return open;\n    }()\n    /**\n     * @param {string} name - The name of the overlay that should be closed.\n     * @returns {Promise} A promise that is resolved when the overlay has been\n     *                    closed.\n     */\n\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(name) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this._overlays[name]) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                throw new Error('The overlay does not exist.');\n\n              case 4:\n                if (this._active) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                throw new Error('The overlay is currently not active.');\n\n              case 8:\n                if (!(this._active !== name)) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                throw new Error('Another overlay is currently active.');\n\n              case 10:\n                this._overlays[this._active].container.classList.add('hidden');\n\n                this._overlays[this._active].element.classList.add('hidden');\n\n                this._active = null;\n                window.removeEventListener('keydown', this._keyDownBound);\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function close(_x5) {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_keyDown\",\n    value: function _keyDown(evt) {\n      if (this._active && evt.keyCode === 27) {\n        // Esc key.\n        this._closeThroughCaller();\n\n        evt.preventDefault();\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_closeThroughCaller\",\n    value: function _closeThroughCaller() {\n      if (this._overlays[this._active].callerCloseMethod) {\n        this._overlays[this._active].callerCloseMethod();\n      }\n\n      if (this._active) {\n        this.close(this._active);\n      }\n    }\n  }, {\n    key: \"active\",\n    get: function get() {\n      return this._active;\n    }\n  }]);\n  return OverlayManager;\n}();\n\nexports.OverlayManager = OverlayManager;",null]}