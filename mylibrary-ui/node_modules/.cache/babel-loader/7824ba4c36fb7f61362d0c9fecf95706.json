{"remainingRequest":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/vue-admin-template-master/src/statics/viewer/pdf/web/base_viewer.js","dependencies":[{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/src/statics/viewer/pdf/web/base_viewer.js","mtime":1577806166000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseViewer = void 0;\n\nvar _ui_utils = require(\"./ui_utils\");\n\nvar _pdf_rendering_queue = require(\"./pdf_rendering_queue\");\n\nvar _annotation_layer_builder = require(\"./annotation_layer_builder\");\n\nvar _pdfjsDist = require(\"pdfjs-dist\");\n\nvar _pdf_page_view = require(\"./pdf_page_view\");\n\nvar _pdf_link_service = require(\"./pdf_link_service\");\n\nvar _text_layer_builder = require(\"./text_layer_builder\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar DEFAULT_CACHE_SIZE = 10;\n/**\n * @typedef {Object} PDFViewerOptions\n * @property {HTMLDivElement} container - The container for the viewer element.\n * @property {HTMLDivElement} [viewer] - The viewer element.\n * @property {EventBus} eventBus - The application event bus.\n * @property {IPDFLinkService} linkService - The navigation/linking service.\n * @property {DownloadManager} [downloadManager] - The download manager\n *   component.\n * @property {PDFFindController} [findController] - The find controller\n *   component.\n * @property {PDFRenderingQueue} [renderingQueue] - The rendering queue object.\n * @property {boolean} [removePageBorders] - Removes the border shadow around\n *   the pages. The default value is `false`.\n * @property {number} [textLayerMode] - Controls if the text layer used for\n *   selection and searching is created, and if the improved text selection\n *   behaviour is enabled. The constants from {TextLayerMode} should be used.\n *   The default value is `TextLayerMode.ENABLE`.\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   mainly for annotation icons. Include trailing slash.\n * @property {boolean} [renderInteractiveForms] - Enables rendering of\n *   interactive form elements. The default is `false`.\n * @property {boolean} [enablePrintAutoRotate] - Enables automatic rotation of\n *   pages whose orientation differ from the first page upon printing. The\n *   default is `false`.\n * @property {string} renderer - 'canvas' or 'svg'. The default is 'canvas'.\n * @property {boolean} [enableWebGL] - Enables WebGL accelerated rendering for\n *   some operations. The default value is `false`.\n * @property {boolean} [useOnlyCssZoom] - Enables CSS only zooming. The default\n *   value is `false`.\n * @property {number} [maxCanvasPixels] - The maximum supported canvas size in\n *   total pixels, i.e. width * height. Use -1 for no limit. The default value\n *   is 4096 * 4096 (16 mega-pixels).\n * @property {IL10n} l10n - Localization service.\n */\n\nfunction PDFPageViewBuffer(size) {\n  var data = [];\n\n  this.push = function (view) {\n    var i = data.indexOf(view);\n\n    if (i >= 0) {\n      data.splice(i, 1);\n    }\n\n    data.push(view);\n\n    if (data.length > size) {\n      data.shift().destroy();\n    }\n  };\n  /**\n   * After calling resize, the size of the buffer will be newSize. The optional\n   * parameter pagesToKeep is, if present, an array of pages to push to the back\n   * of the buffer, delaying their destruction. The size of pagesToKeep has no\n   * impact on the final size of the buffer; if pagesToKeep has length larger\n   * than newSize, some of those pages will be destroyed anyway.\n   */\n\n\n  this.resize = function (newSize, pagesToKeep) {\n    size = newSize;\n\n    if (pagesToKeep) {\n      var pageIdsToKeep = new Set();\n\n      for (var i = 0, iMax = pagesToKeep.length; i < iMax; ++i) {\n        pageIdsToKeep.add(pagesToKeep[i].id);\n      }\n\n      (0, _ui_utils.moveToEndOfArray)(data, function (page) {\n        return pageIdsToKeep.has(page.id);\n      });\n    }\n\n    while (data.length > size) {\n      data.shift().destroy();\n    }\n  };\n}\n\nfunction isSameScale(oldScale, newScale) {\n  if (newScale === oldScale) {\n    return true;\n  }\n\n  if (Math.abs(newScale - oldScale) < 1e-15) {\n    // Prevent unnecessary re-rendering of all pages when the scale\n    // changes only because of limited numerical precision.\n    return true;\n  }\n\n  return false;\n}\n/**\n * Simple viewer control to display PDF content/pages.\n * @implements {IRenderableView}\n */\n\n\nvar BaseViewer =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {PDFViewerOptions} options\n   */\n  function BaseViewer(options) {\n    var _this = this;\n\n    _classCallCheck(this, BaseViewer);\n\n    if (this.constructor === BaseViewer) {\n      throw new Error('Cannot initialize BaseViewer.');\n    }\n\n    this._name = this.constructor.name;\n    this.container = options.container;\n    this.viewer = options.viewer || options.container.firstElementChild;\n    this.eventBus = options.eventBus || (0, _ui_utils.getGlobalEventBus)();\n    this.linkService = options.linkService || new _pdf_link_service.SimpleLinkService();\n    this.downloadManager = options.downloadManager || null;\n    this.findController = options.findController || null;\n    this.removePageBorders = options.removePageBorders || false;\n    this.textLayerMode = Number.isInteger(options.textLayerMode) ? options.textLayerMode : _ui_utils.TextLayerMode.ENABLE;\n    this.imageResourcesPath = options.imageResourcesPath || '';\n    this.renderInteractiveForms = options.renderInteractiveForms || false;\n    this.enablePrintAutoRotate = options.enablePrintAutoRotate || false;\n    this.renderer = options.renderer || _ui_utils.RendererType.CANVAS;\n    this.enableWebGL = options.enableWebGL || false;\n    this.useOnlyCssZoom = options.useOnlyCssZoom || false;\n    this.maxCanvasPixels = options.maxCanvasPixels;\n    this.l10n = options.l10n || _ui_utils.NullL10n;\n    this.defaultRenderingQueue = !options.renderingQueue;\n\n    if (this.defaultRenderingQueue) {\n      // Custom rendering queue is not specified, using default one\n      this.renderingQueue = new _pdf_rendering_queue.PDFRenderingQueue();\n      this.renderingQueue.setViewer(this);\n    } else {\n      this.renderingQueue = options.renderingQueue;\n    }\n\n    this.scroll = (0, _ui_utils.watchScroll)(this.container, this._scrollUpdate.bind(this));\n    this.presentationModeState = _ui_utils.PresentationModeState.UNKNOWN;\n    this._onBeforeDraw = this._onAfterDraw = null;\n\n    this._resetView();\n\n    if (this.removePageBorders) {\n      this.viewer.classList.add('removePageBorders');\n    } // Defer the dispatching of this event, to give other viewer components\n    // time to initialize *and* register 'baseviewerinit' event listeners.\n\n\n    Promise.resolve().then(function () {\n      _this.eventBus.dispatch('baseviewerinit', {\n        source: _this\n      });\n    });\n  }\n\n  _createClass(BaseViewer, [{\n    key: \"getPageView\",\n    value: function getPageView(index) {\n      return this._pages[index];\n    }\n    /**\n     * @type {boolean} - True if all {PDFPageView} objects are initialized.\n     */\n\n  }, {\n    key: \"_setCurrentPageNumber\",\n\n    /**\n     * @returns {boolean} Whether the pageNumber is valid (within bounds).\n     * @private\n     */\n    value: function _setCurrentPageNumber(val) {\n      var resetCurrentPageView = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (this._currentPageNumber === val) {\n        if (resetCurrentPageView) {\n          this._resetCurrentPageView();\n        }\n\n        return true;\n      }\n\n      if (!(0 < val && val <= this.pagesCount)) {\n        return false;\n      }\n\n      this._currentPageNumber = val;\n      this.eventBus.dispatch('pagechanging', {\n        source: this,\n        pageNumber: val,\n        pageLabel: this._pageLabels && this._pageLabels[val - 1]\n      });\n\n      if (resetCurrentPageView) {\n        this._resetCurrentPageView();\n      }\n\n      return true;\n    }\n    /**\n     * @type {string|null} Returns the current page label, or `null` if no page\n     *   labels exist.\n     */\n\n  }, {\n    key: \"setDocument\",\n\n    /**\n     * @param pdfDocument {PDFDocument}\n     */\n    value: function setDocument(pdfDocument) {\n      var _this2 = this;\n\n      if (this.pdfDocument) {\n        this._cancelRendering();\n\n        this._resetView();\n\n        if (this.findController) {\n          this.findController.setDocument(null);\n        }\n      }\n\n      this.pdfDocument = pdfDocument;\n\n      if (!pdfDocument) {\n        return;\n      }\n\n      var pagesCount = pdfDocument.numPages;\n      var pagesCapability = (0, _pdfjsDist.createPromiseCapability)();\n      this.pagesPromise = pagesCapability.promise;\n      pagesCapability.promise.then(function () {\n        _this2._pageViewsReady = true;\n\n        _this2.eventBus.dispatch('pagesloaded', {\n          source: _this2,\n          pagesCount: pagesCount\n        });\n      });\n      var onePageRenderedCapability = (0, _pdfjsDist.createPromiseCapability)();\n      this.onePageRendered = onePageRenderedCapability.promise;\n      var firstPagePromise = pdfDocument.getPage(1);\n      this.firstPagePromise = firstPagePromise;\n\n      this._onBeforeDraw = function (evt) {\n        var pageView = _this2._pages[evt.pageNumber - 1];\n\n        if (!pageView) {\n          return;\n        } // Add the page to the buffer at the start of drawing. That way it can be\n        // evicted from the buffer and destroyed even if we pause its rendering.\n\n\n        _this2._buffer.push(pageView);\n      };\n\n      this.eventBus.on('pagerender', this._onBeforeDraw);\n\n      this._onAfterDraw = function (evt) {\n        if (evt.cssTransform || onePageRenderedCapability.settled) {\n          return;\n        }\n\n        onePageRenderedCapability.resolve();\n\n        _this2.eventBus.off('pagerendered', _this2._onAfterDraw);\n\n        _this2._onAfterDraw = null;\n      };\n\n      this.eventBus.on('pagerendered', this._onAfterDraw); // Fetch a single page so we can get a viewport that will be the default\n      // viewport for all pages\n\n      firstPagePromise.then(function (pdfPage) {\n        var scale = _this2.currentScale;\n        var viewport = pdfPage.getViewport({\n          scale: scale * _ui_utils.CSS_UNITS\n        });\n\n        for (var pageNum = 1; pageNum <= pagesCount; ++pageNum) {\n          var textLayerFactory = null;\n\n          if (_this2.textLayerMode !== _ui_utils.TextLayerMode.DISABLE) {\n            textLayerFactory = _this2;\n          }\n\n          var pageView = new _pdf_page_view.PDFPageView({\n            container: _this2._setDocumentViewerElement,\n            eventBus: _this2.eventBus,\n            id: pageNum,\n            scale: scale,\n            defaultViewport: viewport.clone(),\n            renderingQueue: _this2.renderingQueue,\n            textLayerFactory: textLayerFactory,\n            textLayerMode: _this2.textLayerMode,\n            annotationLayerFactory: _this2,\n            imageResourcesPath: _this2.imageResourcesPath,\n            renderInteractiveForms: _this2.renderInteractiveForms,\n            renderer: _this2.renderer,\n            enableWebGL: _this2.enableWebGL,\n            useOnlyCssZoom: _this2.useOnlyCssZoom,\n            maxCanvasPixels: _this2.maxCanvasPixels,\n            l10n: _this2.l10n\n          });\n\n          _this2._pages.push(pageView);\n        }\n\n        if (_this2._spreadMode !== _ui_utils.SpreadMode.NONE) {\n          _this2._updateSpreadMode();\n        } // Fetch all the pages since the viewport is needed before printing\n        // starts to create the correct size canvas. Wait until one page is\n        // rendered so we don't tie up too many resources early on.\n\n\n        onePageRenderedCapability.promise.then(function () {\n          if (_this2.findController) {\n            _this2.findController.setDocument(pdfDocument); // Enable searching.\n\n          } // In addition to 'disableAutoFetch' being set, also attempt to reduce\n          // resource usage when loading *very* long/large documents.\n\n\n          if (pdfDocument.loadingParams['disableAutoFetch'] || pagesCount > 7500) {\n            // XXX: Printing is semi-broken with auto fetch disabled.\n            pagesCapability.resolve();\n            return;\n          }\n\n          var getPagesLeft = pagesCount;\n\n          var _loop = function _loop(_pageNum) {\n            pdfDocument.getPage(_pageNum).then(function (pdfPage) {\n              var pageView = _this2._pages[_pageNum - 1];\n\n              if (!pageView.pdfPage) {\n                pageView.setPdfPage(pdfPage);\n              }\n\n              _this2.linkService.cachePageRef(_pageNum, pdfPage.ref);\n\n              if (--getPagesLeft === 0) {\n                pagesCapability.resolve();\n              }\n            }, function (reason) {\n              console.error(\"Unable to get page \".concat(_pageNum, \" to initialize viewer\"), reason);\n\n              if (--getPagesLeft === 0) {\n                pagesCapability.resolve();\n              }\n            });\n          };\n\n          for (var _pageNum = 1; _pageNum <= pagesCount; ++_pageNum) {\n            _loop(_pageNum);\n          }\n        });\n\n        _this2.eventBus.dispatch('pagesinit', {\n          source: _this2\n        });\n\n        if (_this2.defaultRenderingQueue) {\n          _this2.update();\n        }\n      }).catch(function (reason) {\n        console.error('Unable to initialize viewer', reason);\n      });\n    }\n    /**\n     * @param {Array|null} labels\n     */\n\n  }, {\n    key: \"setPageLabels\",\n    value: function setPageLabels(labels) {\n      if (!this.pdfDocument) {\n        return;\n      }\n\n      if (!labels) {\n        this._pageLabels = null;\n      } else if (!(Array.isArray(labels) && this.pdfDocument.numPages === labels.length)) {\n        this._pageLabels = null;\n        console.error(\"\".concat(this._name, \".setPageLabels: Invalid page labels.\"));\n      } else {\n        this._pageLabels = labels;\n      } // Update all the `PDFPageView` instances.\n\n\n      for (var i = 0, ii = this._pages.length; i < ii; i++) {\n        var pageView = this._pages[i];\n        var label = this._pageLabels && this._pageLabels[i];\n        pageView.setPageLabel(label);\n      }\n    }\n  }, {\n    key: \"_resetView\",\n    value: function _resetView() {\n      this._pages = [];\n      this._currentPageNumber = 1;\n      this._currentScale = _ui_utils.UNKNOWN_SCALE;\n      this._currentScaleValue = null;\n      this._pageLabels = null;\n      this._buffer = new PDFPageViewBuffer(DEFAULT_CACHE_SIZE);\n      this._location = null;\n      this._pagesRotation = 0;\n      this._pagesRequests = [];\n      this._pageViewsReady = false;\n      this._scrollMode = _ui_utils.ScrollMode.VERTICAL;\n      this._spreadMode = _ui_utils.SpreadMode.NONE;\n\n      if (this._onBeforeDraw) {\n        this.eventBus.off('pagerender', this._onBeforeDraw);\n        this._onBeforeDraw = null;\n      }\n\n      if (this._onAfterDraw) {\n        this.eventBus.off('pagerendered', this._onAfterDraw);\n        this._onAfterDraw = null;\n      } // Remove the pages from the DOM...\n\n\n      this.viewer.textContent = ''; // ... and reset the Scroll mode CSS class(es) afterwards.\n\n      this._updateScrollMode();\n    }\n  }, {\n    key: \"_scrollUpdate\",\n    value: function _scrollUpdate() {\n      if (this.pagesCount === 0) {\n        return;\n      }\n\n      this.update();\n    }\n  }, {\n    key: \"_scrollIntoView\",\n    value: function _scrollIntoView(_ref) {\n      var pageDiv = _ref.pageDiv,\n          _ref$pageSpot = _ref.pageSpot,\n          pageSpot = _ref$pageSpot === void 0 ? null : _ref$pageSpot,\n          _ref$pageNumber = _ref.pageNumber,\n          pageNumber = _ref$pageNumber === void 0 ? null : _ref$pageNumber;\n      (0, _ui_utils.scrollIntoView)(pageDiv, pageSpot);\n    }\n  }, {\n    key: \"_setScaleUpdatePages\",\n    value: function _setScaleUpdatePages(newScale, newValue) {\n      var noScroll = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var preset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      this._currentScaleValue = newValue.toString();\n\n      if (isSameScale(this._currentScale, newScale)) {\n        if (preset) {\n          this.eventBus.dispatch('scalechanging', {\n            source: this,\n            scale: newScale,\n            presetValue: newValue\n          });\n        }\n\n        return;\n      }\n\n      for (var i = 0, ii = this._pages.length; i < ii; i++) {\n        this._pages[i].update(newScale);\n      }\n\n      this._currentScale = newScale;\n\n      if (!noScroll) {\n        var page = this._currentPageNumber,\n            dest;\n\n        if (this._location && !(this.isInPresentationMode || this.isChangingPresentationMode)) {\n          page = this._location.pageNumber;\n          dest = [null, {\n            name: 'XYZ'\n          }, this._location.left, this._location.top, null];\n        }\n\n        this.scrollPageIntoView({\n          pageNumber: page,\n          destArray: dest,\n          allowNegativeOffset: true\n        });\n      }\n\n      this.eventBus.dispatch('scalechanging', {\n        source: this,\n        scale: newScale,\n        presetValue: preset ? newValue : undefined\n      });\n\n      if (this.defaultRenderingQueue) {\n        this.update();\n      }\n    }\n  }, {\n    key: \"_setScale\",\n    value: function _setScale(value) {\n      var noScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var scale = parseFloat(value);\n\n      if (scale > 0) {\n        this._setScaleUpdatePages(scale, value, noScroll,\n        /* preset = */\n        false);\n      } else {\n        var currentPage = this._pages[this._currentPageNumber - 1];\n\n        if (!currentPage) {\n          return;\n        }\n\n        var noPadding = this.isInPresentationMode || this.removePageBorders;\n        var hPadding = noPadding ? 0 : _ui_utils.SCROLLBAR_PADDING;\n        var vPadding = noPadding ? 0 : _ui_utils.VERTICAL_PADDING;\n\n        if (!noPadding && this._isScrollModeHorizontal) {\n          var _ref2 = [vPadding, hPadding];\n          hPadding = _ref2[0];\n          vPadding = _ref2[1];\n        }\n\n        var pageWidthScale = (this.container.clientWidth - hPadding) / currentPage.width * currentPage.scale;\n        var pageHeightScale = (this.container.clientHeight - vPadding) / currentPage.height * currentPage.scale;\n\n        switch (value) {\n          case 'page-actual':\n            scale = 1;\n            break;\n\n          case 'page-width':\n            scale = pageWidthScale;\n            break;\n\n          case 'page-height':\n            scale = pageHeightScale;\n            break;\n\n          case 'page-fit':\n            scale = Math.min(pageWidthScale, pageHeightScale);\n            break;\n\n          case 'auto':\n            // For pages in landscape mode, fit the page height to the viewer\n            // *unless* the page would thus become too wide to fit horizontally.\n            var horizontalScale = (0, _ui_utils.isPortraitOrientation)(currentPage) ? pageWidthScale : Math.min(pageHeightScale, pageWidthScale);\n            scale = Math.min(_ui_utils.MAX_AUTO_SCALE, horizontalScale);\n            break;\n\n          default:\n            console.error(\"\".concat(this._name, \"._setScale: \\\"\").concat(value, \"\\\" is an unknown zoom value.\"));\n            return;\n        }\n\n        this._setScaleUpdatePages(scale, value, noScroll,\n        /* preset = */\n        true);\n      }\n    }\n    /**\n     * Refreshes page view: scrolls to the current page and updates the scale.\n     * @private\n     */\n\n  }, {\n    key: \"_resetCurrentPageView\",\n    value: function _resetCurrentPageView() {\n      if (this.isInPresentationMode) {\n        // Fixes the case when PDF has different page sizes.\n        this._setScale(this._currentScaleValue, true);\n      }\n\n      var pageView = this._pages[this._currentPageNumber - 1];\n\n      this._scrollIntoView({\n        pageDiv: pageView.div\n      });\n    }\n    /**\n     * @typedef ScrollPageIntoViewParameters\n     * @property {number} pageNumber - The page number.\n     * @property {Array} [destArray] - The original PDF destination array, in the\n     *   format: <page-ref> </XYZ|/FitXXX> <args..>\n     * @property {boolean} [allowNegativeOffset] - Allow negative page offsets.\n     *   The default value is `false`.\n     */\n\n    /**\n     * Scrolls page into view.\n     * @param {ScrollPageIntoViewParameters} params\n     */\n\n  }, {\n    key: \"scrollPageIntoView\",\n    value: function scrollPageIntoView(_ref3) {\n      var pageNumber = _ref3.pageNumber,\n          _ref3$destArray = _ref3.destArray,\n          destArray = _ref3$destArray === void 0 ? null : _ref3$destArray,\n          _ref3$allowNegativeOf = _ref3.allowNegativeOffset,\n          allowNegativeOffset = _ref3$allowNegativeOf === void 0 ? false : _ref3$allowNegativeOf;\n\n      if (!this.pdfDocument) {\n        return;\n      }\n\n      var pageView = Number.isInteger(pageNumber) && this._pages[pageNumber - 1];\n\n      if (!pageView) {\n        console.error(\"\".concat(this._name, \".scrollPageIntoView: \") + \"\\\"\".concat(pageNumber, \"\\\" is not a valid pageNumber parameter.\"));\n        return;\n      }\n\n      if (this.isInPresentationMode || !destArray) {\n        this._setCurrentPageNumber(pageNumber,\n        /* resetCurrentPageView = */\n        true);\n\n        return;\n      }\n\n      var x = 0,\n          y = 0;\n      var width = 0,\n          height = 0,\n          widthScale,\n          heightScale;\n      var changeOrientation = pageView.rotation % 180 === 0 ? false : true;\n      var pageWidth = (changeOrientation ? pageView.height : pageView.width) / pageView.scale / _ui_utils.CSS_UNITS;\n      var pageHeight = (changeOrientation ? pageView.width : pageView.height) / pageView.scale / _ui_utils.CSS_UNITS;\n      var scale = 0;\n\n      switch (destArray[1].name) {\n        case 'XYZ':\n          x = destArray[2];\n          y = destArray[3];\n          scale = destArray[4]; // If x and/or y coordinates are not supplied, default to\n          // _top_ left of the page (not the obvious bottom left,\n          // since aligning the bottom of the intended page with the\n          // top of the window is rarely helpful).\n\n          x = x !== null ? x : 0;\n          y = y !== null ? y : pageHeight;\n          break;\n\n        case 'Fit':\n        case 'FitB':\n          scale = 'page-fit';\n          break;\n\n        case 'FitH':\n        case 'FitBH':\n          y = destArray[2];\n          scale = 'page-width'; // According to the PDF spec, section 12.3.2.2, a `null` value in the\n          // parameter should maintain the position relative to the new page.\n\n          if (y === null && this._location) {\n            x = this._location.left;\n            y = this._location.top;\n          }\n\n          break;\n\n        case 'FitV':\n        case 'FitBV':\n          x = destArray[2];\n          width = pageWidth;\n          height = pageHeight;\n          scale = 'page-height';\n          break;\n\n        case 'FitR':\n          x = destArray[2];\n          y = destArray[3];\n          width = destArray[4] - x;\n          height = destArray[5] - y;\n          var hPadding = this.removePageBorders ? 0 : _ui_utils.SCROLLBAR_PADDING;\n          var vPadding = this.removePageBorders ? 0 : _ui_utils.VERTICAL_PADDING;\n          widthScale = (this.container.clientWidth - hPadding) / width / _ui_utils.CSS_UNITS;\n          heightScale = (this.container.clientHeight - vPadding) / height / _ui_utils.CSS_UNITS;\n          scale = Math.min(Math.abs(widthScale), Math.abs(heightScale));\n          break;\n\n        default:\n          console.error(\"\".concat(this._name, \".scrollPageIntoView: \") + \"\\\"\".concat(destArray[1].name, \"\\\" is not a valid destination type.\"));\n          return;\n      }\n\n      if (scale && scale !== this._currentScale) {\n        this.currentScaleValue = scale;\n      } else if (this._currentScale === _ui_utils.UNKNOWN_SCALE) {\n        this.currentScaleValue = _ui_utils.DEFAULT_SCALE_VALUE;\n      }\n\n      if (scale === 'page-fit' && !destArray[4]) {\n        this._scrollIntoView({\n          pageDiv: pageView.div,\n          pageNumber: pageNumber\n        });\n\n        return;\n      }\n\n      var boundingRect = [pageView.viewport.convertToViewportPoint(x, y), pageView.viewport.convertToViewportPoint(x + width, y + height)];\n      var left = Math.min(boundingRect[0][0], boundingRect[1][0]);\n      var top = Math.min(boundingRect[0][1], boundingRect[1][1]);\n\n      if (!allowNegativeOffset) {\n        // Some bad PDF generators will create destinations with e.g. top values\n        // that exceeds the page height. Ensure that offsets are not negative,\n        // to prevent a previous page from becoming visible (fixes bug 874482).\n        left = Math.max(left, 0);\n        top = Math.max(top, 0);\n      }\n\n      this._scrollIntoView({\n        pageDiv: pageView.div,\n        pageSpot: {\n          left: left,\n          top: top\n        },\n        pageNumber: pageNumber\n      });\n    }\n  }, {\n    key: \"_updateLocation\",\n    value: function _updateLocation(firstPage) {\n      var currentScale = this._currentScale;\n      var currentScaleValue = this._currentScaleValue;\n      var normalizedScaleValue = parseFloat(currentScaleValue) === currentScale ? Math.round(currentScale * 10000) / 100 : currentScaleValue;\n      var pageNumber = firstPage.id;\n      var pdfOpenParams = '#page=' + pageNumber;\n      pdfOpenParams += '&zoom=' + normalizedScaleValue;\n      var currentPageView = this._pages[pageNumber - 1];\n      var container = this.container;\n      var topLeft = currentPageView.getPagePoint(container.scrollLeft - firstPage.x, container.scrollTop - firstPage.y);\n      var intLeft = Math.round(topLeft[0]);\n      var intTop = Math.round(topLeft[1]);\n      pdfOpenParams += ',' + intLeft + ',' + intTop;\n      this._location = {\n        pageNumber: pageNumber,\n        scale: normalizedScaleValue,\n        top: intTop,\n        left: intLeft,\n        rotation: this._pagesRotation,\n        pdfOpenParams: pdfOpenParams\n      };\n    }\n  }, {\n    key: \"_updateHelper\",\n    value: function _updateHelper(visiblePages) {\n      throw new Error('Not implemented: _updateHelper');\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var visible = this._getVisiblePages();\n\n      var visiblePages = visible.views,\n          numVisiblePages = visiblePages.length;\n\n      if (numVisiblePages === 0) {\n        return;\n      }\n\n      var newCacheSize = Math.max(DEFAULT_CACHE_SIZE, 2 * numVisiblePages + 1);\n\n      this._buffer.resize(newCacheSize, visiblePages);\n\n      this.renderingQueue.renderHighestPriority(visible);\n\n      this._updateHelper(visiblePages); // Run any class-specific update code.\n\n\n      this._updateLocation(visible.first);\n\n      this.eventBus.dispatch('updateviewarea', {\n        source: this,\n        location: this._location\n      });\n    }\n  }, {\n    key: \"containsElement\",\n    value: function containsElement(element) {\n      return this.container.contains(element);\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.container.focus();\n    }\n  }, {\n    key: \"_getCurrentVisiblePage\",\n\n    /**\n     * Helper method for `this._getVisiblePages`. Should only ever be used when\n     * the viewer can only display a single page at a time, for example in:\n     *  - `PDFSinglePageViewer`.\n     *  - `PDFViewer` with Presentation Mode active.\n     */\n    value: function _getCurrentVisiblePage() {\n      if (!this.pagesCount) {\n        return {\n          views: []\n        };\n      }\n\n      var pageView = this._pages[this._currentPageNumber - 1]; // NOTE: Compute the `x` and `y` properties of the current view,\n      // since `this._updateLocation` depends of them being available.\n\n      var element = pageView.div;\n      var view = {\n        id: pageView.id,\n        x: element.offsetLeft + element.clientLeft,\n        y: element.offsetTop + element.clientTop,\n        view: pageView\n      };\n      return {\n        first: view,\n        last: view,\n        views: [view]\n      };\n    }\n  }, {\n    key: \"_getVisiblePages\",\n    value: function _getVisiblePages() {\n      return (0, _ui_utils.getVisibleElements)(this.container, this._pages, true, this._isScrollModeHorizontal);\n    }\n    /**\n     * @param {number} pageNumber\n     */\n\n  }, {\n    key: \"isPageVisible\",\n    value: function isPageVisible(pageNumber) {\n      if (!this.pdfDocument) {\n        return false;\n      }\n\n      if (this.pageNumber < 1 || pageNumber > this.pagesCount) {\n        console.error(\"\".concat(this._name, \".isPageVisible: \\\"\").concat(pageNumber, \"\\\" is out of bounds.\"));\n        return false;\n      }\n\n      return this._getVisiblePages().views.some(function (view) {\n        return view.id === pageNumber;\n      });\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      for (var i = 0, ii = this._pages.length; i < ii; i++) {\n        if (this._pages[i] && this._pages[i].renderingState !== _pdf_rendering_queue.RenderingStates.FINISHED) {\n          this._pages[i].reset();\n        }\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_cancelRendering\",\n    value: function _cancelRendering() {\n      for (var i = 0, ii = this._pages.length; i < ii; i++) {\n        if (this._pages[i]) {\n          this._pages[i].cancelRendering();\n        }\n      }\n    }\n    /**\n     * @param {PDFPageView} pageView\n     * @returns {Promise} Returns a promise containing a {PDFPageProxy} object.\n     * @private\n     */\n\n  }, {\n    key: \"_ensurePdfPageLoaded\",\n    value: function _ensurePdfPageLoaded(pageView) {\n      var _this3 = this;\n\n      if (pageView.pdfPage) {\n        return Promise.resolve(pageView.pdfPage);\n      }\n\n      var pageNumber = pageView.id;\n\n      if (this._pagesRequests[pageNumber]) {\n        return this._pagesRequests[pageNumber];\n      }\n\n      var promise = this.pdfDocument.getPage(pageNumber).then(function (pdfPage) {\n        if (!pageView.pdfPage) {\n          pageView.setPdfPage(pdfPage);\n        }\n\n        _this3._pagesRequests[pageNumber] = null;\n        return pdfPage;\n      }).catch(function (reason) {\n        console.error('Unable to get page for page view', reason); // Page error -- there is nothing can be done.\n\n        _this3._pagesRequests[pageNumber] = null;\n      });\n      this._pagesRequests[pageNumber] = promise;\n      return promise;\n    }\n  }, {\n    key: \"forceRendering\",\n    value: function forceRendering(currentlyVisiblePages) {\n      var _this4 = this;\n\n      var visiblePages = currentlyVisiblePages || this._getVisiblePages();\n\n      var scrollAhead = this._isScrollModeHorizontal ? this.scroll.right : this.scroll.down;\n      var pageView = this.renderingQueue.getHighestPriority(visiblePages, this._pages, scrollAhead);\n\n      if (pageView) {\n        this._ensurePdfPageLoaded(pageView).then(function () {\n          _this4.renderingQueue.renderView(pageView);\n        });\n\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * @param {HTMLDivElement} textLayerDiv\n     * @param {number} pageIndex\n     * @param {PageViewport} viewport\n     * @returns {TextLayerBuilder}\n     */\n\n  }, {\n    key: \"createTextLayerBuilder\",\n    value: function createTextLayerBuilder(textLayerDiv, pageIndex, viewport) {\n      var enhanceTextSelection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      return new _text_layer_builder.TextLayerBuilder({\n        textLayerDiv: textLayerDiv,\n        eventBus: this.eventBus,\n        pageIndex: pageIndex,\n        viewport: viewport,\n        findController: this.isInPresentationMode ? null : this.findController,\n        enhanceTextSelection: this.isInPresentationMode ? false : enhanceTextSelection\n      });\n    }\n    /**\n     * @param {HTMLDivElement} pageDiv\n     * @param {PDFPage} pdfPage\n     * @param {string} [imageResourcesPath] - Path for image resources, mainly\n     *   for annotation icons. Include trailing slash.\n     * @param {boolean} renderInteractiveForms\n     * @param {IL10n} l10n\n     * @returns {AnnotationLayerBuilder}\n     */\n\n  }, {\n    key: \"createAnnotationLayerBuilder\",\n    value: function createAnnotationLayerBuilder(pageDiv, pdfPage) {\n      var imageResourcesPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var renderInteractiveForms = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var l10n = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _ui_utils.NullL10n;\n      return new _annotation_layer_builder.AnnotationLayerBuilder({\n        pageDiv: pageDiv,\n        pdfPage: pdfPage,\n        imageResourcesPath: imageResourcesPath,\n        renderInteractiveForms: renderInteractiveForms,\n        linkService: this.linkService,\n        downloadManager: this.downloadManager,\n        l10n: l10n\n      });\n    }\n    /**\n     * @type {boolean} Whether all pages of the PDF document have identical\n     *   widths and heights.\n     */\n\n  }, {\n    key: \"getPagesOverview\",\n\n    /**\n     * Returns sizes of the pages.\n     * @returns {Array} Array of objects with width/height/rotation fields.\n     */\n    value: function getPagesOverview() {\n      var pagesOverview = this._pages.map(function (pageView) {\n        var viewport = pageView.pdfPage.getViewport({\n          scale: 1\n        });\n        return {\n          width: viewport.width,\n          height: viewport.height,\n          rotation: viewport.rotation\n        };\n      });\n\n      if (!this.enablePrintAutoRotate) {\n        return pagesOverview;\n      }\n\n      var isFirstPagePortrait = (0, _ui_utils.isPortraitOrientation)(pagesOverview[0]);\n      return pagesOverview.map(function (size) {\n        if (isFirstPagePortrait === (0, _ui_utils.isPortraitOrientation)(size)) {\n          return size;\n        }\n\n        return {\n          width: size.height,\n          height: size.width,\n          rotation: (size.rotation + 90) % 360\n        };\n      });\n    }\n    /**\n     * @type {number} One of the values in {ScrollMode}.\n     */\n\n  }, {\n    key: \"_updateScrollMode\",\n    value: function _updateScrollMode() {\n      var pageNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var scrollMode = this._scrollMode,\n          viewer = this.viewer;\n      viewer.classList.toggle('scrollHorizontal', scrollMode === _ui_utils.ScrollMode.HORIZONTAL);\n      viewer.classList.toggle('scrollWrapped', scrollMode === _ui_utils.ScrollMode.WRAPPED);\n\n      if (!this.pdfDocument || !pageNumber) {\n        return;\n      } // Non-numeric scale values can be sensitive to the scroll orientation.\n      // Call this before re-scrolling to the current page, to ensure that any\n      // changes in scale don't move the current page.\n\n\n      if (this._currentScaleValue && isNaN(this._currentScaleValue)) {\n        this._setScale(this._currentScaleValue, true);\n      }\n\n      this._setCurrentPageNumber(pageNumber,\n      /* resetCurrentPageView = */\n      true);\n\n      this.update();\n    }\n    /**\n     * @type {number} One of the values in {SpreadMode}.\n     */\n\n  }, {\n    key: \"_updateSpreadMode\",\n    value: function _updateSpreadMode() {\n      var pageNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (!this.pdfDocument) {\n        return;\n      }\n\n      var viewer = this.viewer,\n          pages = this._pages; // Temporarily remove all the pages from the DOM.\n\n      viewer.textContent = '';\n\n      if (this._spreadMode === _ui_utils.SpreadMode.NONE) {\n        for (var i = 0, iMax = pages.length; i < iMax; ++i) {\n          viewer.appendChild(pages[i].div);\n        }\n      } else {\n        var parity = this._spreadMode - 1;\n        var spread = null;\n\n        for (var _i = 0, _iMax = pages.length; _i < _iMax; ++_i) {\n          if (spread === null) {\n            spread = document.createElement('div');\n            spread.className = 'spread';\n            viewer.appendChild(spread);\n          } else if (_i % 2 === parity) {\n            spread = spread.cloneNode(false);\n            viewer.appendChild(spread);\n          }\n\n          spread.appendChild(pages[_i].div);\n        }\n      }\n\n      if (!pageNumber) {\n        return;\n      }\n\n      this._setCurrentPageNumber(pageNumber,\n      /* resetCurrentPageView = */\n      true);\n\n      this.update();\n    }\n  }, {\n    key: \"pagesCount\",\n    get: function get() {\n      return this._pages.length;\n    }\n  }, {\n    key: \"pageViewsReady\",\n    get: function get() {\n      return this._pageViewsReady;\n    }\n    /**\n     * @type {number}\n     */\n\n  }, {\n    key: \"currentPageNumber\",\n    get: function get() {\n      return this._currentPageNumber;\n    }\n    /**\n     * @param {number} val - The page number.\n     */\n    ,\n    set: function set(val) {\n      if (!Number.isInteger(val)) {\n        throw new Error('Invalid page number.');\n      }\n\n      if (!this.pdfDocument) {\n        return;\n      } // The intent can be to just reset a scroll position and/or scale.\n\n\n      if (!this._setCurrentPageNumber(val,\n      /* resetCurrentPageView = */\n      true)) {\n        console.error(\"\".concat(this._name, \".currentPageNumber: \\\"\").concat(val, \"\\\" is not a valid page.\"));\n      }\n    }\n  }, {\n    key: \"currentPageLabel\",\n    get: function get() {\n      return this._pageLabels && this._pageLabels[this._currentPageNumber - 1];\n    }\n    /**\n     * @param {string} val - The page label.\n     */\n    ,\n    set: function set(val) {\n      if (!this.pdfDocument) {\n        return;\n      }\n\n      var page = val | 0; // Fallback page number.\n\n      if (this._pageLabels) {\n        var i = this._pageLabels.indexOf(val);\n\n        if (i >= 0) {\n          page = i + 1;\n        }\n      } // The intent can be to just reset a scroll position and/or scale.\n\n\n      if (!this._setCurrentPageNumber(page,\n      /* resetCurrentPageView = */\n      true)) {\n        console.error(\"\".concat(this._name, \".currentPageLabel: \\\"\").concat(val, \"\\\" is not a valid page.\"));\n      }\n    }\n    /**\n     * @type {number}\n     */\n\n  }, {\n    key: \"currentScale\",\n    get: function get() {\n      return this._currentScale !== _ui_utils.UNKNOWN_SCALE ? this._currentScale : _ui_utils.DEFAULT_SCALE;\n    }\n    /**\n     * @param {number} val - Scale of the pages in percents.\n     */\n    ,\n    set: function set(val) {\n      if (isNaN(val)) {\n        throw new Error('Invalid numeric scale.');\n      }\n\n      if (!this.pdfDocument) {\n        return;\n      }\n\n      this._setScale(val, false);\n    }\n    /**\n     * @type {string}\n     */\n\n  }, {\n    key: \"currentScaleValue\",\n    get: function get() {\n      return this._currentScaleValue;\n    }\n    /**\n     * @param val - The scale of the pages (in percent or predefined value).\n     */\n    ,\n    set: function set(val) {\n      if (!this.pdfDocument) {\n        return;\n      }\n\n      this._setScale(val, false);\n    }\n    /**\n     * @type {number}\n     */\n\n  }, {\n    key: \"pagesRotation\",\n    get: function get() {\n      return this._pagesRotation;\n    }\n    /**\n     * @param {number} rotation - The rotation of the pages (0, 90, 180, 270).\n     */\n    ,\n    set: function set(rotation) {\n      if (!(0, _ui_utils.isValidRotation)(rotation)) {\n        throw new Error('Invalid pages rotation angle.');\n      }\n\n      if (!this.pdfDocument) {\n        return;\n      }\n\n      if (this._pagesRotation === rotation) {\n        return; // The rotation didn't change.\n      }\n\n      this._pagesRotation = rotation;\n      var pageNumber = this._currentPageNumber;\n\n      for (var i = 0, ii = this._pages.length; i < ii; i++) {\n        var pageView = this._pages[i];\n        pageView.update(pageView.scale, rotation);\n      } // Prevent errors in case the rotation changes *before* the scale has been\n      // set to a non-default value.\n\n\n      if (this._currentScaleValue) {\n        this._setScale(this._currentScaleValue, true);\n      }\n\n      this.eventBus.dispatch('rotationchanging', {\n        source: this,\n        pagesRotation: rotation,\n        pageNumber: pageNumber\n      });\n\n      if (this.defaultRenderingQueue) {\n        this.update();\n      }\n    }\n  }, {\n    key: \"_setDocumentViewerElement\",\n    get: function get() {\n      // In most viewers, e.g. `PDFViewer`, this should return `this.viewer`.\n      throw new Error('Not implemented: _setDocumentViewerElement');\n    }\n  }, {\n    key: \"_isScrollModeHorizontal\",\n    get: function get() {\n      // Used to ensure that pre-rendering of the next/previous page works\n      // correctly, since Scroll/Spread modes are ignored in Presentation Mode.\n      return this.isInPresentationMode ? false : this._scrollMode === _ui_utils.ScrollMode.HORIZONTAL;\n    }\n  }, {\n    key: \"isInPresentationMode\",\n    get: function get() {\n      return this.presentationModeState === _ui_utils.PresentationModeState.FULLSCREEN;\n    }\n  }, {\n    key: \"isChangingPresentationMode\",\n    get: function get() {\n      return this.presentationModeState === _ui_utils.PresentationModeState.CHANGING;\n    }\n  }, {\n    key: \"isHorizontalScrollbarEnabled\",\n    get: function get() {\n      return this.isInPresentationMode ? false : this.container.scrollWidth > this.container.clientWidth;\n    }\n  }, {\n    key: \"isVerticalScrollbarEnabled\",\n    get: function get() {\n      return this.isInPresentationMode ? false : this.container.scrollHeight > this.container.clientHeight;\n    }\n  }, {\n    key: \"hasEqualPageSizes\",\n    get: function get() {\n      var firstPageView = this._pages[0];\n\n      for (var i = 1, ii = this._pages.length; i < ii; ++i) {\n        var pageView = this._pages[i];\n\n        if (pageView.width !== firstPageView.width || pageView.height !== firstPageView.height) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"scrollMode\",\n    get: function get() {\n      return this._scrollMode;\n    }\n    /**\n     * @param {number} mode - The direction in which the document pages should be\n     *   laid out within the scrolling container.\n     *   The constants from {ScrollMode} should be used.\n     */\n    ,\n    set: function set(mode) {\n      if (this._scrollMode === mode) {\n        return; // The Scroll mode didn't change.\n      }\n\n      if (!(0, _ui_utils.isValidScrollMode)(mode)) {\n        throw new Error(\"Invalid scroll mode: \".concat(mode));\n      }\n\n      this._scrollMode = mode;\n      this.eventBus.dispatch('scrollmodechanged', {\n        source: this,\n        mode: mode\n      });\n\n      this._updateScrollMode(\n      /* pageNumber = */\n      this._currentPageNumber);\n    }\n  }, {\n    key: \"spreadMode\",\n    get: function get() {\n      return this._spreadMode;\n    }\n    /**\n     * @param {number} mode - Group the pages in spreads, starting with odd- or\n     *   even-number pages (unless `SpreadMode.NONE` is used).\n     *   The constants from {SpreadMode} should be used.\n     */\n    ,\n    set: function set(mode) {\n      if (this._spreadMode === mode) {\n        return; // The Spread mode didn't change.\n      }\n\n      if (!(0, _ui_utils.isValidSpreadMode)(mode)) {\n        throw new Error(\"Invalid spread mode: \".concat(mode));\n      }\n\n      this._spreadMode = mode;\n      this.eventBus.dispatch('spreadmodechanged', {\n        source: this,\n        mode: mode\n      });\n\n      this._updateSpreadMode(\n      /* pageNumber = */\n      this._currentPageNumber);\n    }\n  }]);\n\n  return BaseViewer;\n}();\n\nexports.BaseViewer = BaseViewer;",null]}