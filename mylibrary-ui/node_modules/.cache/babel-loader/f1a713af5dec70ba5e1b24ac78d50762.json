{"remainingRequest":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/web/pdf_document_properties.js","dependencies":[{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/web/pdf_document_properties.js","mtime":1577806166000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PDFDocumentProperties = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/@babel/runtime/regenerator\"));\n\nvar _pdfjsDist = require(\"pdfjs-dist\");\n\nvar _ui_utils = require(\"./ui_utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar DEFAULT_FIELD_CONTENT = '-'; // See https://en.wikibooks.org/wiki/Lentis/Conversion_to_the_Metric_Standard_in_the_United_States\n\nvar NON_METRIC_LOCALES = ['en-us', 'en-lr', 'my']; // Should use the format: `width x height`, in portrait orientation.\n// See https://en.wikipedia.org/wiki/Paper_size\n\nvar US_PAGE_NAMES = {\n  '8.5x11': 'Letter',\n  '8.5x14': 'Legal'\n};\nvar METRIC_PAGE_NAMES = {\n  '297x420': 'A3',\n  '210x297': 'A4'\n};\n\nfunction getPageName(size, isPortrait, pageNames) {\n  var width = isPortrait ? size.width : size.height;\n  var height = isPortrait ? size.height : size.width;\n  return pageNames[\"\".concat(width, \"x\").concat(height)];\n}\n/**\n * @typedef {Object} PDFDocumentPropertiesOptions\n * @property {string} overlayName - Name/identifier for the overlay.\n * @property {Object} fields - Names and elements of the overlay's fields.\n * @property {HTMLDivElement} container - Div container for the overlay.\n * @property {HTMLButtonElement} closeButton - Button for closing the overlay.\n */\n\n\nvar PDFDocumentProperties =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {PDFDocumentPropertiesOptions} options\n   * @param {OverlayManager} overlayManager - Manager for the viewer overlays.\n   * @param {EventBus} eventBus - The application event bus.\n   * @param {IL10n} l10n - Localization service.\n   */\n  function PDFDocumentProperties(_ref, overlayManager, eventBus) {\n    var _this = this;\n\n    var overlayName = _ref.overlayName,\n        fields = _ref.fields,\n        container = _ref.container,\n        closeButton = _ref.closeButton;\n    var l10n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _ui_utils.NullL10n;\n\n    _classCallCheck(this, PDFDocumentProperties);\n\n    this.overlayName = overlayName;\n    this.fields = fields;\n    this.container = container;\n    this.overlayManager = overlayManager;\n    this.l10n = l10n;\n\n    this._reset();\n\n    if (closeButton) {\n      // Bind the event listener for the Close button.\n      closeButton.addEventListener('click', this.close.bind(this));\n    }\n\n    this.overlayManager.register(this.overlayName, this.container, this.close.bind(this));\n\n    if (eventBus) {\n      eventBus.on('pagechanging', function (evt) {\n        _this._currentPageNumber = evt.pageNumber;\n      });\n      eventBus.on('rotationchanging', function (evt) {\n        _this._pagesRotation = evt.pagesRotation;\n      });\n    }\n\n    this._isNonMetricLocale = true; // The default viewer locale is 'en-us'.\n\n    l10n.getLanguage().then(function (locale) {\n      _this._isNonMetricLocale = NON_METRIC_LOCALES.includes(locale);\n    });\n  }\n  /**\n   * Open the document properties overlay.\n   */\n\n\n  _createClass(PDFDocumentProperties, [{\n    key: \"open\",\n    value: function open() {\n      var _this2 = this;\n\n      var freezeFieldData = function freezeFieldData(data) {\n        Object.defineProperty(_this2, 'fieldData', {\n          value: Object.freeze(data),\n          writable: false,\n          enumerable: true,\n          configurable: true\n        });\n      };\n\n      Promise.all([this.overlayManager.open(this.overlayName), this._dataAvailableCapability.promise]).then(function () {\n        var currentPageNumber = _this2._currentPageNumber;\n        var pagesRotation = _this2._pagesRotation; // If the document properties were previously fetched (for this PDF file),\n        // just update the dialog immediately to avoid redundant lookups.\n\n        if (_this2.fieldData && currentPageNumber === _this2.fieldData['_currentPageNumber'] && pagesRotation === _this2.fieldData['_pagesRotation']) {\n          _this2._updateUI();\n\n          return;\n        } // Get the document properties.\n\n\n        _this2.pdfDocument.getMetadata().then(function (_ref2) {\n          var info = _ref2.info,\n              metadata = _ref2.metadata,\n              contentDispositionFilename = _ref2.contentDispositionFilename;\n          return Promise.all([info, metadata, contentDispositionFilename || (0, _ui_utils.getPDFFileNameFromURL)(_this2.url || ''), _this2._parseFileSize(_this2.maybeFileSize), _this2._parseDate(info.CreationDate), _this2._parseDate(info.ModDate), _this2.pdfDocument.getPage(currentPageNumber).then(function (pdfPage) {\n            return _this2._parsePageSize((0, _ui_utils.getPageSizeInches)(pdfPage), pagesRotation);\n          }), _this2._parseLinearization(info.IsLinearized)]);\n        }).then(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 8),\n              info = _ref4[0],\n              metadata = _ref4[1],\n              fileName = _ref4[2],\n              fileSize = _ref4[3],\n              creationDate = _ref4[4],\n              modDate = _ref4[5],\n              pageSize = _ref4[6],\n              isLinearized = _ref4[7];\n\n          freezeFieldData({\n            'fileName': fileName,\n            'fileSize': fileSize,\n            'title': info.Title,\n            'author': info.Author,\n            'subject': info.Subject,\n            'keywords': info.Keywords,\n            'creationDate': creationDate,\n            'modificationDate': modDate,\n            'creator': info.Creator,\n            'producer': info.Producer,\n            'version': info.PDFFormatVersion,\n            'pageCount': _this2.pdfDocument.numPages,\n            'pageSize': pageSize,\n            'linearized': isLinearized,\n            '_currentPageNumber': currentPageNumber,\n            '_pagesRotation': pagesRotation\n          });\n\n          _this2._updateUI(); // Get the correct fileSize, since it may not have been set (if\n          // `this.setFileSize` wasn't called) or may be incorrectly set.\n\n\n          return _this2.pdfDocument.getDownloadInfo();\n        }).then(function (_ref5) {\n          var length = _ref5.length;\n          _this2.maybeFileSize = length;\n          return _this2._parseFileSize(length);\n        }).then(function (fileSize) {\n          if (fileSize === _this2.fieldData['fileSize']) {\n            return; // The fileSize has already been correctly set.\n          }\n\n          var data = Object.assign(Object.create(null), _this2.fieldData);\n          data['fileSize'] = fileSize;\n          freezeFieldData(data);\n\n          _this2._updateUI();\n        });\n      });\n    }\n    /**\n     * Close the document properties overlay.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.overlayManager.close(this.overlayName);\n    }\n    /**\n     * Set a reference to the PDF document and the URL in order\n     * to populate the overlay fields with the document properties.\n     * Note that the overlay will contain no information if this method\n     * is not called.\n     *\n     * @param {PDFDocumentProxy} pdfDocument - A reference to the PDF document.\n     * @param {string} url - The URL of the document.\n     */\n\n  }, {\n    key: \"setDocument\",\n    value: function setDocument(pdfDocument) {\n      var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (this.pdfDocument) {\n        this._reset();\n\n        this._updateUI(true);\n      }\n\n      if (!pdfDocument) {\n        return;\n      }\n\n      this.pdfDocument = pdfDocument;\n      this.url = url;\n\n      this._dataAvailableCapability.resolve();\n    }\n    /**\n     * Set the file size of the PDF document. This method is used to\n     * update the file size in the document properties overlay once it\n     * is known so we do not have to wait until the entire file is loaded.\n     *\n     * @param {number} fileSize - The file size of the PDF document.\n     */\n\n  }, {\n    key: \"setFileSize\",\n    value: function setFileSize(fileSize) {\n      if (Number.isInteger(fileSize) && fileSize > 0) {\n        this.maybeFileSize = fileSize;\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_reset\",\n    value: function _reset() {\n      this.pdfDocument = null;\n      this.url = null;\n      this.maybeFileSize = 0;\n      delete this.fieldData;\n      this._dataAvailableCapability = (0, _pdfjsDist.createPromiseCapability)();\n      this._currentPageNumber = 1;\n      this._pagesRotation = 0;\n    }\n    /**\n     * Always updates all of the dialog fields, to prevent inconsistent UI state.\n     * NOTE: If the contents of a particular field is neither a non-empty string,\n     *       nor a number, it will fall back to `DEFAULT_FIELD_CONTENT`.\n     * @private\n     */\n\n  }, {\n    key: \"_updateUI\",\n    value: function _updateUI() {\n      var reset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (reset || !this.fieldData) {\n        for (var id in this.fields) {\n          this.fields[id].textContent = DEFAULT_FIELD_CONTENT;\n        }\n\n        return;\n      }\n\n      if (this.overlayManager.active !== this.overlayName) {\n        // Don't bother updating the dialog if has already been closed,\n        // since it will be updated the next time `this.open` is called.\n        return;\n      }\n\n      for (var _id in this.fields) {\n        var content = this.fieldData[_id];\n        this.fields[_id].textContent = content || content === 0 ? content : DEFAULT_FIELD_CONTENT;\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_parseFileSize\",\n    value: function () {\n      var _parseFileSize2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee() {\n        var fileSize,\n            kb,\n            _args = arguments;\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                fileSize = _args.length > 0 && _args[0] !== undefined ? _args[0] : 0;\n                kb = fileSize / 1024;\n\n                if (kb) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", undefined);\n\n              case 6:\n                if (!(kb < 1024)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.l10n.get('document_properties_kb', {\n                  size_kb: (+kb.toPrecision(3)).toLocaleString(),\n                  size_b: fileSize.toLocaleString()\n                }, '{{size_kb}} KB ({{size_b}} bytes)'));\n\n              case 8:\n                return _context.abrupt(\"return\", this.l10n.get('document_properties_mb', {\n                  size_mb: (+(kb / 1024).toPrecision(3)).toLocaleString(),\n                  size_b: fileSize.toLocaleString()\n                }, '{{size_mb}} MB ({{size_b}} bytes)'));\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _parseFileSize() {\n        return _parseFileSize2.apply(this, arguments);\n      }\n\n      return _parseFileSize;\n    }()\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_parsePageSize\",\n    value: function () {\n      var _parsePageSize2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2(pageSizeInches, pagesRotation) {\n        var _this3 = this;\n\n        var isPortrait, sizeInches, sizeMillimeters, pageName, name, exactMillimeters, intMillimeters;\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (pageSizeInches) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", undefined);\n\n              case 2:\n                // Take the viewer rotation into account as well; compare with Adobe Reader.\n                if (pagesRotation % 180 !== 0) {\n                  pageSizeInches = {\n                    width: pageSizeInches.height,\n                    height: pageSizeInches.width\n                  };\n                }\n\n                isPortrait = (0, _ui_utils.isPortraitOrientation)(pageSizeInches);\n                sizeInches = {\n                  width: Math.round(pageSizeInches.width * 100) / 100,\n                  height: Math.round(pageSizeInches.height * 100) / 100\n                }; // 1in == 25.4mm; no need to round to 2 decimals for millimeters.\n\n                sizeMillimeters = {\n                  width: Math.round(pageSizeInches.width * 25.4 * 10) / 10,\n                  height: Math.round(pageSizeInches.height * 25.4 * 10) / 10\n                };\n                pageName = null;\n                name = getPageName(sizeInches, isPortrait, US_PAGE_NAMES) || getPageName(sizeMillimeters, isPortrait, METRIC_PAGE_NAMES);\n\n                if (!name && !(Number.isInteger(sizeMillimeters.width) && Number.isInteger(sizeMillimeters.height))) {\n                  // Attempt to improve the page name detection by falling back to fuzzy\n                  // matching of the metric dimensions, to account for e.g. rounding errors\n                  // and/or PDF files that define the page sizes in an imprecise manner.\n                  exactMillimeters = {\n                    width: pageSizeInches.width * 25.4,\n                    height: pageSizeInches.height * 25.4\n                  };\n                  intMillimeters = {\n                    width: Math.round(sizeMillimeters.width),\n                    height: Math.round(sizeMillimeters.height)\n                  }; // Try to avoid false positives, by only considering \"small\" differences.\n\n                  if (Math.abs(exactMillimeters.width - intMillimeters.width) < 0.1 && Math.abs(exactMillimeters.height - intMillimeters.height) < 0.1) {\n                    name = getPageName(intMillimeters, isPortrait, METRIC_PAGE_NAMES);\n\n                    if (name) {\n                      // Update *both* sizes, computed above, to ensure that the displayed\n                      // dimensions always correspond to the detected page name.\n                      sizeInches = {\n                        width: Math.round(intMillimeters.width / 25.4 * 100) / 100,\n                        height: Math.round(intMillimeters.height / 25.4 * 100) / 100\n                      };\n                      sizeMillimeters = intMillimeters;\n                    }\n                  }\n                }\n\n                if (name) {\n                  pageName = this.l10n.get('document_properties_page_size_name_' + name.toLowerCase(), null, name);\n                }\n\n                return _context2.abrupt(\"return\", Promise.all([this._isNonMetricLocale ? sizeInches : sizeMillimeters, this.l10n.get('document_properties_page_size_unit_' + (this._isNonMetricLocale ? 'inches' : 'millimeters'), null, this._isNonMetricLocale ? 'in' : 'mm'), pageName, this.l10n.get('document_properties_page_size_orientation_' + (isPortrait ? 'portrait' : 'landscape'), null, isPortrait ? 'portrait' : 'landscape')]).then(function (_ref6) {\n                  var _ref7 = _slicedToArray(_ref6, 4),\n                      _ref7$ = _ref7[0],\n                      width = _ref7$.width,\n                      height = _ref7$.height,\n                      unit = _ref7[1],\n                      name = _ref7[2],\n                      orientation = _ref7[3];\n\n                  return _this3.l10n.get('document_properties_page_size_dimension_' + (name ? 'name_' : '') + 'string', {\n                    width: width.toLocaleString(),\n                    height: height.toLocaleString(),\n                    unit: unit,\n                    name: name,\n                    orientation: orientation\n                  }, '{{width}} × {{height}} {{unit}} (' + (name ? '{{name}}, ' : '') + '{{orientation}})');\n                }));\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _parsePageSize(_x, _x2) {\n        return _parsePageSize2.apply(this, arguments);\n      }\n\n      return _parsePageSize;\n    }()\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_parseDate\",\n    value: function () {\n      var _parseDate2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee3(inputDate) {\n        var dateObject;\n        return _regenerator.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                dateObject = _pdfjsDist.PDFDateString.toDateObject(inputDate);\n\n                if (dateObject) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", undefined);\n\n              case 3:\n                return _context3.abrupt(\"return\", this.l10n.get('document_properties_date_string', {\n                  date: dateObject.toLocaleDateString(),\n                  time: dateObject.toLocaleTimeString()\n                }, '{{date}}, {{time}}'));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _parseDate(_x3) {\n        return _parseDate2.apply(this, arguments);\n      }\n\n      return _parseDate;\n    }()\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_parseLinearization\",\n    value: function _parseLinearization(isLinearized) {\n      return this.l10n.get('document_properties_linearized_' + (isLinearized ? 'yes' : 'no'), null, isLinearized ? 'Yes' : 'No');\n    }\n  }]);\n\n  return PDFDocumentProperties;\n}();\n\nexports.PDFDocumentProperties = PDFDocumentProperties;",null]}