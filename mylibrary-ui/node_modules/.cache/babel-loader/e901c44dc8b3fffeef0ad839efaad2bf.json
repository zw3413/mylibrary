{"remainingRequest":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/weizhang/JAVASHOP/vue-admin-template-master/src/statics/viewer/pdf/web/pdf_single_page_viewer.js","dependencies":[{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/src/statics/viewer/pdf/web/pdf_single_page_viewer.js","mtime":1577806166000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PDFSinglePageViewer = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime-corejs2/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _base_viewer = require(\"./base_viewer\");\n\nvar _pdfjsDist = require(\"pdfjs-dist\");\n\n/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar PDFSinglePageViewer =\n/*#__PURE__*/\nfunction (_BaseViewer) {\n  (0, _inherits2.default)(PDFSinglePageViewer, _BaseViewer);\n\n  function PDFSinglePageViewer(options) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, PDFSinglePageViewer);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(PDFSinglePageViewer).call(this, options));\n\n    _this.eventBus.on('pagesinit', function (evt) {\n      // Since the pages are placed in a `DocumentFragment`, make sure that\n      // the current page becomes visible upon loading of the document.\n      _this._ensurePageViewVisible();\n    });\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(PDFSinglePageViewer, [{\n    key: \"_resetView\",\n    value: function _resetView() {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(PDFSinglePageViewer.prototype), \"_resetView\", this).call(this);\n      this._previousPageNumber = 1;\n      this._shadowViewer = document.createDocumentFragment();\n      this._updateScrollDown = null;\n    }\n  }, {\n    key: \"_ensurePageViewVisible\",\n    value: function _ensurePageViewVisible() {\n      var pageView = this._pages[this._currentPageNumber - 1];\n      var previousPageView = this._pages[this._previousPageNumber - 1];\n      var viewerNodes = this.viewer.childNodes;\n\n      switch (viewerNodes.length) {\n        case 0:\n          // Should *only* occur on initial loading.\n          this.viewer.appendChild(pageView.div);\n          break;\n\n        case 1:\n          // The normal page-switching case.\n          if (viewerNodes[0] !== previousPageView.div) {\n            throw new Error('_ensurePageViewVisible: Unexpected previously visible page.');\n          }\n\n          if (pageView === previousPageView) {\n            break; // The correct page is already visible.\n          } // Switch visible pages, and reset the viewerContainer scroll position.\n\n\n          this._shadowViewer.appendChild(previousPageView.div);\n\n          this.viewer.appendChild(pageView.div);\n          this.container.scrollTop = 0;\n          break;\n\n        default:\n          throw new Error('_ensurePageViewVisible: Only one page should be visible at a time.');\n      }\n\n      this._previousPageNumber = this._currentPageNumber;\n    }\n  }, {\n    key: \"_scrollUpdate\",\n    value: function _scrollUpdate() {\n      if (this._updateScrollDown) {\n        this._updateScrollDown();\n      }\n\n      (0, _get2.default)((0, _getPrototypeOf2.default)(PDFSinglePageViewer.prototype), \"_scrollUpdate\", this).call(this);\n    }\n  }, {\n    key: \"_scrollIntoView\",\n    value: function _scrollIntoView(_ref) {\n      var _this2 = this;\n\n      var pageDiv = _ref.pageDiv,\n          _ref$pageSpot = _ref.pageSpot,\n          pageSpot = _ref$pageSpot === void 0 ? null : _ref$pageSpot,\n          _ref$pageNumber = _ref.pageNumber,\n          pageNumber = _ref$pageNumber === void 0 ? null : _ref$pageNumber;\n\n      if (pageNumber) {\n        // Ensure that `this._currentPageNumber` is correct.\n        this._setCurrentPageNumber(pageNumber);\n      }\n\n      var scrolledDown = this._currentPageNumber >= this._previousPageNumber;\n\n      this._ensurePageViewVisible(); // Ensure that rendering always occurs, to avoid showing a blank page,\n      // even if the current position doesn't change when the page is scrolled.\n\n\n      this.update();\n      (0, _get2.default)((0, _getPrototypeOf2.default)(PDFSinglePageViewer.prototype), \"_scrollIntoView\", this).call(this, {\n        pageDiv: pageDiv,\n        pageSpot: pageSpot,\n        pageNumber: pageNumber\n      }); // Since scrolling is tracked using `requestAnimationFrame`, update the\n      // scroll direction during the next `this._scrollUpdate` invocation.\n\n      this._updateScrollDown = function () {\n        _this2.scroll.down = scrolledDown;\n        _this2._updateScrollDown = null;\n      };\n    }\n  }, {\n    key: \"_getVisiblePages\",\n    value: function _getVisiblePages() {\n      return this._getCurrentVisiblePage();\n    }\n  }, {\n    key: \"_updateHelper\",\n    value: function _updateHelper(visiblePages) {}\n  }, {\n    key: \"_updateScrollMode\",\n    value: function _updateScrollMode() {}\n  }, {\n    key: \"_updateSpreadMode\",\n    value: function _updateSpreadMode() {}\n  }, {\n    key: \"_setDocumentViewerElement\",\n    get: function get() {\n      // Since we only want to display *one* page at a time when using the\n      // `PDFSinglePageViewer`, we cannot append them to the `viewer` DOM element.\n      // Instead, they are placed in a `DocumentFragment`, and only the current\n      // page is displayed in the viewer (refer to `this._ensurePageViewVisible`).\n      return (0, _pdfjsDist.shadow)(this, '_setDocumentViewerElement', this._shadowViewer);\n    }\n  }, {\n    key: \"_isScrollModeHorizontal\",\n    get: function get() {\n      // The Scroll/Spread modes are never used in `PDFSinglePageViewer`.\n      return (0, _pdfjsDist.shadow)(this, '_isScrollModeHorizontal', false);\n    }\n  }]);\n  return PDFSinglePageViewer;\n}(_base_viewer.BaseViewer);\n\nexports.PDFSinglePageViewer = PDFSinglePageViewer;",null]}