{"remainingRequest":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/weizhang/JAVASHOP/vue-admin-template-master/src/statics/viewer/pdf/web/pdf_attachment_viewer.js","dependencies":[{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/src/statics/viewer/pdf/web/pdf_attachment_viewer.js","mtime":1577806166000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PDFAttachmentViewer = void 0;\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _pdfjsDist = require(\"pdfjs-dist\");\n\n/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {Object} PDFAttachmentViewerOptions\n * @property {HTMLDivElement} container - The viewer element.\n * @property {EventBus} eventBus - The application event bus.\n * @property {DownloadManager} downloadManager - The download manager.\n */\n\n/**\n * @typedef {Object} PDFAttachmentViewerRenderParameters\n * @property {Object|null} attachments - A lookup table of attachment objects.\n */\nvar PDFAttachmentViewer =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {PDFAttachmentViewerOptions} options\n   */\n  function PDFAttachmentViewer(_ref) {\n    var container = _ref.container,\n        eventBus = _ref.eventBus,\n        downloadManager = _ref.downloadManager;\n    (0, _classCallCheck2.default)(this, PDFAttachmentViewer);\n    this.container = container;\n    this.eventBus = eventBus;\n    this.downloadManager = downloadManager;\n    this.reset();\n    this.eventBus.on('fileattachmentannotation', this._appendAttachment.bind(this));\n  }\n\n  (0, _createClass2.default)(PDFAttachmentViewer, [{\n    key: \"reset\",\n    value: function reset() {\n      var keepRenderedCapability = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.attachments = null; // Remove the attachments from the DOM.\n\n      this.container.textContent = '';\n\n      if (!keepRenderedCapability) {\n        // NOTE: The *only* situation in which the `_renderedCapability` should\n        //       not be replaced is when appending file attachment annotations.\n        this._renderedCapability = (0, _pdfjsDist.createPromiseCapability)();\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_dispatchEvent\",\n    value: function _dispatchEvent(attachmentsCount) {\n      this._renderedCapability.resolve();\n\n      this.eventBus.dispatch('attachmentsloaded', {\n        source: this,\n        attachmentsCount: attachmentsCount\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_bindPdfLink\",\n    value: function _bindPdfLink(button, content, filename) {\n      if (this.downloadManager.disableCreateObjectURL) {\n        throw new Error('bindPdfLink: Unsupported \"disableCreateObjectURL\" value.');\n      }\n\n      var blobUrl;\n\n      button.onclick = function () {\n        if (!blobUrl) {\n          blobUrl = (0, _pdfjsDist.createObjectURL)(content, 'application/pdf');\n        }\n\n        var viewerUrl;\n\n        if (typeof PDFJSDev === 'undefined' || PDFJSDev.test('GENERIC')) {\n          // The current URL is the viewer, let's use it and append the file.\n          viewerUrl = '?file=' + encodeURIComponent(blobUrl + '#' + filename);\n        } else if (PDFJSDev.test('CHROME')) {\n          // In the Chrome extension, the URL is rewritten using the history API\n          // in viewer.js, so an absolute URL must be generated.\n          // eslint-disable-next-line no-undef\n          viewerUrl = chrome.runtime.getURL('/content/web/viewer.html') + '?file=' + encodeURIComponent(blobUrl + '#' + filename);\n        } else if (PDFJSDev.test('FIREFOX || MOZCENTRAL')) {\n          // Let Firefox's content handler catch the URL and display the PDF.\n          viewerUrl = blobUrl + '?' + encodeURIComponent(filename);\n        }\n\n        window.open(viewerUrl);\n        return false;\n      };\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_bindLink\",\n    value: function _bindLink(button, content, filename) {\n      var _this = this;\n\n      button.onclick = function () {\n        _this.downloadManager.downloadData(content, filename, '');\n\n        return false;\n      };\n    }\n    /**\n     * @param {PDFAttachmentViewerRenderParameters} params\n     */\n\n  }, {\n    key: \"render\",\n    value: function render(_ref2) {\n      var attachments = _ref2.attachments,\n          _ref2$keepRenderedCap = _ref2.keepRenderedCapability,\n          keepRenderedCapability = _ref2$keepRenderedCap === void 0 ? false : _ref2$keepRenderedCap;\n      var attachmentsCount = 0;\n\n      if (this.attachments) {\n        this.reset(keepRenderedCapability === true);\n      }\n\n      this.attachments = attachments || null;\n\n      if (!attachments) {\n        this._dispatchEvent(attachmentsCount);\n\n        return;\n      }\n\n      var names = Object.keys(attachments).sort(function (a, b) {\n        return a.toLowerCase().localeCompare(b.toLowerCase());\n      });\n      attachmentsCount = names.length;\n\n      for (var i = 0; i < attachmentsCount; i++) {\n        var item = attachments[names[i]];\n        var filename = (0, _pdfjsDist.removeNullCharacters)((0, _pdfjsDist.getFilenameFromUrl)(item.filename));\n        var div = document.createElement('div');\n        div.className = 'attachmentsItem';\n        var button = document.createElement('button');\n        button.textContent = filename;\n\n        if (/\\.pdf$/i.test(filename) && !this.downloadManager.disableCreateObjectURL) {\n          this._bindPdfLink(button, item.content, filename);\n        } else {\n          this._bindLink(button, item.content, filename);\n        }\n\n        div.appendChild(button);\n        this.container.appendChild(div);\n      }\n\n      this._dispatchEvent(attachmentsCount);\n    }\n    /**\n     * Used to append FileAttachment annotations to the sidebar.\n     * @private\n     */\n\n  }, {\n    key: \"_appendAttachment\",\n    value: function _appendAttachment(_ref3) {\n      var _this2 = this;\n\n      var id = _ref3.id,\n          filename = _ref3.filename,\n          content = _ref3.content;\n\n      this._renderedCapability.promise.then(function () {\n        var attachments = _this2.attachments;\n\n        if (!attachments) {\n          attachments = Object.create(null);\n        } else {\n          for (var name in attachments) {\n            if (id === name) {\n              return; // Ignore the new attachment if it already exists.\n            }\n          }\n        }\n\n        attachments[id] = {\n          filename: filename,\n          content: content\n        };\n\n        _this2.render({\n          attachments: attachments,\n          keepRenderedCapability: true\n        });\n      });\n    }\n  }]);\n  return PDFAttachmentViewer;\n}();\n\nexports.PDFAttachmentViewer = PDFAttachmentViewer;",null]}