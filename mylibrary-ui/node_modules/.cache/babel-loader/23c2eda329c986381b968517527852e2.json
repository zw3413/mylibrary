{"remainingRequest":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/weizhang/JAVASHOP/vue-admin-template-master/src/statics/viewer/pdf/src/core/worker_stream.js","dependencies":[{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/src/statics/viewer/pdf/src/core/worker_stream.js","mtime":1572199794000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PDFWorkerStream = void 0;\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator\"));\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _util = require(\"../shared/util\");\n\n/* Copyright 2019 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint no-var: error */\n\n/** @implements {IPDFStream} */\nvar PDFWorkerStream =\n/*#__PURE__*/\nfunction () {\n  function PDFWorkerStream(msgHandler) {\n    (0, _classCallCheck2.default)(this, PDFWorkerStream);\n    this._msgHandler = msgHandler;\n    this._contentLength = null;\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  (0, _createClass2.default)(PDFWorkerStream, [{\n    key: \"getFullReader\",\n    value: function getFullReader() {\n      (0, _util.assert)(!this._fullRequestReader);\n      this._fullRequestReader = new PDFWorkerStreamReader(this._msgHandler);\n      return this._fullRequestReader;\n    }\n  }, {\n    key: \"getRangeReader\",\n    value: function getRangeReader(begin, end) {\n      var reader = new PDFWorkerStreamRangeReader(begin, end, this._msgHandler);\n\n      this._rangeRequestReaders.push(reader);\n\n      return reader;\n    }\n  }, {\n    key: \"cancelAllRequests\",\n    value: function cancelAllRequests(reason) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader.cancel(reason);\n      }\n\n      var readers = this._rangeRequestReaders.slice(0);\n\n      readers.forEach(function (reader) {\n        reader.cancel(reason);\n      });\n    }\n  }]);\n  return PDFWorkerStream;\n}();\n/** @implements {IPDFStreamReader} */\n\n\nexports.PDFWorkerStream = PDFWorkerStream;\n\nvar PDFWorkerStreamReader =\n/*#__PURE__*/\nfunction () {\n  function PDFWorkerStreamReader(msgHandler) {\n    var _this = this;\n\n    (0, _classCallCheck2.default)(this, PDFWorkerStreamReader);\n    this._msgHandler = msgHandler;\n    this.onProgress = null;\n    this._contentLength = null;\n    this._isRangeSupported = false;\n    this._isStreamingSupported = false;\n\n    var readableStream = this._msgHandler.sendWithStream('GetReader');\n\n    this._reader = readableStream.getReader();\n    this._headersReady = this._msgHandler.sendWithPromise('ReaderHeadersReady').then(function (data) {\n      _this._isStreamingSupported = data.isStreamingSupported;\n      _this._isRangeSupported = data.isRangeSupported;\n      _this._contentLength = data.contentLength;\n    });\n  }\n\n  (0, _createClass2.default)(PDFWorkerStreamReader, [{\n    key: \"read\",\n    value: function () {\n      var _read = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _ref, value, done;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._reader.read();\n\n              case 2:\n                _ref = _context.sent;\n                value = _ref.value;\n                done = _ref.done;\n\n                if (!done) {\n                  _context.next = 7;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  value: undefined,\n                  done: true\n                });\n\n              case 7:\n                return _context.abrupt(\"return\", {\n                  value: value.buffer,\n                  done: false\n                });\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function read() {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"cancel\",\n    value: function cancel(reason) {\n      this._reader.cancel(reason);\n    }\n  }, {\n    key: \"headersReady\",\n    get: function get() {\n      return this._headersReady;\n    }\n  }, {\n    key: \"contentLength\",\n    get: function get() {\n      return this._contentLength;\n    }\n  }, {\n    key: \"isStreamingSupported\",\n    get: function get() {\n      return this._isStreamingSupported;\n    }\n  }, {\n    key: \"isRangeSupported\",\n    get: function get() {\n      return this._isRangeSupported;\n    }\n  }]);\n  return PDFWorkerStreamReader;\n}();\n/** @implements {IPDFStreamRangeReader} */\n\n\nvar PDFWorkerStreamRangeReader =\n/*#__PURE__*/\nfunction () {\n  function PDFWorkerStreamRangeReader(begin, end, msgHandler) {\n    (0, _classCallCheck2.default)(this, PDFWorkerStreamRangeReader);\n    this._msgHandler = msgHandler;\n    this.onProgress = null;\n\n    var readableStream = this._msgHandler.sendWithStream('GetRangeReader', {\n      begin: begin,\n      end: end\n    });\n\n    this._reader = readableStream.getReader();\n  }\n\n  (0, _createClass2.default)(PDFWorkerStreamRangeReader, [{\n    key: \"read\",\n    value: function () {\n      var _read2 = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _ref2, value, done;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._reader.read();\n\n              case 2:\n                _ref2 = _context2.sent;\n                value = _ref2.value;\n                done = _ref2.done;\n\n                if (!done) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", {\n                  value: undefined,\n                  done: true\n                });\n\n              case 7:\n                return _context2.abrupt(\"return\", {\n                  value: value.buffer,\n                  done: false\n                });\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function read() {\n        return _read2.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"cancel\",\n    value: function cancel(reason) {\n      this._reader.cancel(reason);\n    }\n  }, {\n    key: \"isStreamingSupported\",\n    get: function get() {\n      return false;\n    }\n  }]);\n  return PDFWorkerStreamRangeReader;\n}();",null]}