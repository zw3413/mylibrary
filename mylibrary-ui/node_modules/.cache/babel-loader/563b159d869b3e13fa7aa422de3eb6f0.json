{"remainingRequest":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/thread-loader/dist/cjs.js!/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/web/toolbar.js","dependencies":[{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/web/toolbar.js","mtime":1577806166000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/* Copyright 2016 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { animationStarted, DEFAULT_SCALE, DEFAULT_SCALE_VALUE, MAX_SCALE, MIN_SCALE, noContextMenuHandler, NullL10n } from './ui_utils';\nvar PAGE_NUMBER_LOADING_INDICATOR = 'visiblePageIsLoading';\nvar SCALE_SELECT_CONTAINER_PADDING = 8;\nvar SCALE_SELECT_PADDING = 22;\n/**\n * @typedef {Object} ToolbarOptions\n * @property {HTMLDivElement} container - Container for the secondary toolbar.\n * @property {HTMLSpanElement} numPages - Label that contains number of pages.\n * @property {HTMLInputElement} pageNumber - Control for display and user input\n *   of the current page number.\n * @property {HTMLSpanElement} scaleSelectContainer - Container where scale\n *   controls are placed. The width is adjusted on UI initialization.\n * @property {HTMLSelectElement} scaleSelect - Scale selection control.\n * @property {HTMLOptionElement} customScaleOption - The item used to display\n *   a non-predefined scale.\n * @property {HTMLButtonElement} previous - Button to go to the previous page.\n * @property {HTMLButtonElement} next - Button to go to the next page.\n * @property {HTMLButtonElement} zoomIn - Button to zoom in the pages.\n * @property {HTMLButtonElement} zoomOut - Button to zoom out the pages.\n * @property {HTMLButtonElement} viewFind - Button to open find bar.\n * @property {HTMLButtonElement} openFile - Button to open a new document.\n * @property {HTMLButtonElement} presentationModeButton - Button to switch to\n *   presentation mode.\n * @property {HTMLButtonElement} download - Button to download the document.\n * @property {HTMLAElement} viewBookmark - Element to link current url of\n *   the page view.\n */\n\nvar Toolbar =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {ToolbarOptions} options\n   * @param {EventBus} eventBus\n   * @param {IL10n} l10n - Localization service.\n   */\n  function Toolbar(options, eventBus) {\n    var l10n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NullL10n;\n\n    _classCallCheck(this, Toolbar);\n\n    this.toolbar = options.container;\n    this.eventBus = eventBus;\n    this.l10n = l10n;\n    this.items = options;\n    this._wasLocalized = false;\n    this.reset(); // Bind the event listeners for click and hand tool actions.\n\n    this._bindListeners();\n  }\n\n  _createClass(Toolbar, [{\n    key: \"setPageNumber\",\n    value: function setPageNumber(pageNumber, pageLabel) {\n      this.pageNumber = pageNumber;\n      this.pageLabel = pageLabel;\n\n      this._updateUIState(false);\n    }\n  }, {\n    key: \"setPagesCount\",\n    value: function setPagesCount(pagesCount, hasPageLabels) {\n      this.pagesCount = pagesCount;\n      this.hasPageLabels = hasPageLabels;\n\n      this._updateUIState(true);\n    }\n  }, {\n    key: \"setPageScale\",\n    value: function setPageScale(pageScaleValue, pageScale) {\n      this.pageScaleValue = (pageScaleValue || pageScale).toString();\n      this.pageScale = pageScale;\n\n      this._updateUIState(false);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.pageNumber = 0;\n      this.pageLabel = null;\n      this.hasPageLabels = false;\n      this.pagesCount = 0;\n      this.pageScaleValue = DEFAULT_SCALE_VALUE;\n      this.pageScale = DEFAULT_SCALE;\n\n      this._updateUIState(true);\n\n      this.updateLoadingIndicatorState();\n    }\n  }, {\n    key: \"_bindListeners\",\n    value: function _bindListeners() {\n      var _this = this;\n\n      var eventBus = this.eventBus,\n          items = this.items;\n      var self = this;\n      items.previous.addEventListener('click', function () {\n        eventBus.dispatch('previouspage', {\n          source: self\n        });\n      });\n      items.next.addEventListener('click', function () {\n        eventBus.dispatch('nextpage', {\n          source: self\n        });\n      });\n      items.zoomIn.addEventListener('click', function () {\n        eventBus.dispatch('zoomin', {\n          source: self\n        });\n      });\n      items.zoomOut.addEventListener('click', function () {\n        eventBus.dispatch('zoomout', {\n          source: self\n        });\n      });\n      items.pageNumber.addEventListener('click', function () {\n        this.select();\n      });\n      items.pageNumber.addEventListener('change', function () {\n        eventBus.dispatch('pagenumberchanged', {\n          source: self,\n          value: this.value\n        });\n      });\n      items.scaleSelect.addEventListener('change', function () {\n        if (this.value === 'custom') {\n          return;\n        }\n\n        eventBus.dispatch('scalechanged', {\n          source: self,\n          value: this.value\n        });\n      });\n      items.presentationModeButton.addEventListener('click', function () {\n        eventBus.dispatch('presentationmode', {\n          source: self\n        });\n      });\n      items.openFile.addEventListener('click', function () {\n        eventBus.dispatch('openfile', {\n          source: self\n        });\n      });\n      items.print.addEventListener('click', function () {\n        eventBus.dispatch('print', {\n          source: self\n        });\n      });\n      items.download.addEventListener('click', function () {\n        eventBus.dispatch('download', {\n          source: self\n        });\n      }); // Suppress context menus for some controls.\n\n      items.scaleSelect.oncontextmenu = noContextMenuHandler;\n      eventBus.on('localized', function () {\n        _this._localized();\n      });\n    }\n  }, {\n    key: \"_localized\",\n    value: function _localized() {\n      this._wasLocalized = true;\n\n      this._adjustScaleWidth();\n\n      this._updateUIState(true);\n    }\n  }, {\n    key: \"_updateUIState\",\n    value: function _updateUIState() {\n      var resetNumPages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (!this._wasLocalized) {\n        // Don't update the UI state until we localize the toolbar.\n        return;\n      }\n\n      var pageNumber = this.pageNumber,\n          pagesCount = this.pagesCount,\n          pageScaleValue = this.pageScaleValue,\n          pageScale = this.pageScale,\n          items = this.items;\n\n      if (resetNumPages) {\n        if (this.hasPageLabels) {\n          items.pageNumber.type = 'text';\n        } else {\n          items.pageNumber.type = 'number';\n          this.l10n.get('of_pages', {\n            pagesCount: pagesCount\n          }, 'of {{pagesCount}}').then(function (msg) {\n            items.numPages.textContent = msg;\n          });\n        }\n\n        items.pageNumber.max = pagesCount;\n      }\n\n      if (this.hasPageLabels) {\n        items.pageNumber.value = this.pageLabel;\n        this.l10n.get('page_of_pages', {\n          pageNumber: pageNumber,\n          pagesCount: pagesCount\n        }, '({{pageNumber}} of {{pagesCount}})').then(function (msg) {\n          items.numPages.textContent = msg;\n        });\n      } else {\n        items.pageNumber.value = pageNumber;\n      }\n\n      items.previous.disabled = pageNumber <= 1;\n      items.next.disabled = pageNumber >= pagesCount;\n      items.zoomOut.disabled = pageScale <= MIN_SCALE;\n      items.zoomIn.disabled = pageScale >= MAX_SCALE;\n      var customScale = Math.round(pageScale * 10000) / 100;\n      this.l10n.get('page_scale_percent', {\n        scale: customScale\n      }, '{{scale}}%').then(function (msg) {\n        var options = items.scaleSelect.options;\n        var predefinedValueFound = false;\n\n        for (var i = 0, ii = options.length; i < ii; i++) {\n          var option = options[i];\n\n          if (option.value !== pageScaleValue) {\n            option.selected = false;\n            continue;\n          }\n\n          option.selected = true;\n          predefinedValueFound = true;\n        }\n\n        if (!predefinedValueFound) {\n          items.customScaleOption.textContent = msg;\n          items.customScaleOption.selected = true;\n        }\n      });\n    }\n  }, {\n    key: \"updateLoadingIndicatorState\",\n    value: function updateLoadingIndicatorState() {\n      var loading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var pageNumberInput = this.items.pageNumber;\n      pageNumberInput.classList.toggle(PAGE_NUMBER_LOADING_INDICATOR, loading);\n    }\n  }, {\n    key: \"_adjustScaleWidth\",\n    value: function _adjustScaleWidth() {\n      var container = this.items.scaleSelectContainer;\n      var select = this.items.scaleSelect;\n      animationStarted.then(function () {\n        // Adjust the width of the zoom box to fit the content.\n        // Note: If the window is narrow enough that the zoom box is not\n        //       visible, we temporarily show it to be able to adjust its width.\n        if (container.clientWidth === 0) {\n          container.setAttribute('style', 'display: inherit;');\n        }\n\n        if (container.clientWidth > 0) {\n          select.setAttribute('style', 'min-width: inherit;');\n          var width = select.clientWidth + SCALE_SELECT_CONTAINER_PADDING;\n          select.setAttribute('style', 'min-width: ' + (width + SCALE_SELECT_PADDING) + 'px;');\n          container.setAttribute('style', 'min-width: ' + width + 'px; ' + 'max-width: ' + width + 'px;');\n        }\n      });\n    }\n  }]);\n\n  return Toolbar;\n}();\n\nexport { Toolbar };",null]}