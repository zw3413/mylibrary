{"remainingRequest":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/web/pdf_print_service.js","dependencies":[{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/web/pdf_print_service.js","mtime":1577806166000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PDFPrintService = PDFPrintService;\n\nvar _ui_utils = require(\"./ui_utils\");\n\nvar _app = require(\"./app\");\n\nvar _app_options = require(\"./app_options\");\n\n/* Copyright 2016 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar activeService = null;\nvar overlayManager = null; // Renders the page to the canvas of the given print service, and returns\n// the suggested dimensions of the output page.\n\nfunction renderPage(activeServiceOnEntry, pdfDocument, pageNumber, size) {\n  var scratchCanvas = activeService.scratchCanvas; // The size of the canvas in pixels for printing.\n\n  var PRINT_RESOLUTION = _app_options.AppOptions.get('printResolution') || 150;\n  var PRINT_UNITS = PRINT_RESOLUTION / 72.0;\n  scratchCanvas.width = Math.floor(size.width * PRINT_UNITS);\n  scratchCanvas.height = Math.floor(size.height * PRINT_UNITS); // The physical size of the img as specified by the PDF document.\n\n  var width = Math.floor(size.width * _ui_utils.CSS_UNITS) + 'px';\n  var height = Math.floor(size.height * _ui_utils.CSS_UNITS) + 'px';\n  var ctx = scratchCanvas.getContext('2d');\n  ctx.save();\n  ctx.fillStyle = 'rgb(255, 255, 255)';\n  ctx.fillRect(0, 0, scratchCanvas.width, scratchCanvas.height);\n  ctx.restore();\n  return pdfDocument.getPage(pageNumber).then(function (pdfPage) {\n    var renderContext = {\n      canvasContext: ctx,\n      transform: [PRINT_UNITS, 0, 0, PRINT_UNITS, 0, 0],\n      viewport: pdfPage.getViewport({\n        scale: 1,\n        rotation: size.rotation\n      }),\n      intent: 'print'\n    };\n    return pdfPage.render(renderContext).promise;\n  }).then(function () {\n    return {\n      width: width,\n      height: height\n    };\n  });\n}\n\nfunction PDFPrintService(pdfDocument, pagesOverview, printContainer, l10n) {\n  this.pdfDocument = pdfDocument;\n  this.pagesOverview = pagesOverview;\n  this.printContainer = printContainer;\n  this.l10n = l10n || _ui_utils.NullL10n;\n  this.disableCreateObjectURL = pdfDocument.loadingParams['disableCreateObjectURL'];\n  this.currentPage = -1; // The temporary canvas where renderPage paints one page at a time.\n\n  this.scratchCanvas = document.createElement('canvas');\n}\n\nPDFPrintService.prototype = {\n  layout: function layout() {\n    this.throwIfInactive();\n    var body = document.querySelector('body');\n    body.setAttribute('data-pdfjsprinting', true);\n    var hasEqualPageSizes = this.pagesOverview.every(function (size) {\n      return size.width === this.pagesOverview[0].width && size.height === this.pagesOverview[0].height;\n    }, this);\n\n    if (!hasEqualPageSizes) {\n      console.warn('Not all pages have the same size. The printed ' + 'result may be incorrect!');\n    } // Insert a @page + size rule to make sure that the page size is correctly\n    // set. Note that we assume that all pages have the same size, because\n    // variable-size pages are not supported yet (e.g. in Chrome & Firefox).\n    // TODO(robwu): Use named pages when size calculation bugs get resolved\n    // (e.g. https://crbug.com/355116) AND when support for named pages is\n    // added (http://www.w3.org/TR/css3-page/#using-named-pages).\n    // In browsers where @page + size is not supported (such as Firefox,\n    // https://bugzil.la/851441), the next stylesheet will be ignored and the\n    // user has to select the correct paper size in the UI if wanted.\n\n\n    this.pageStyleSheet = document.createElement('style');\n    var pageSize = this.pagesOverview[0];\n    this.pageStyleSheet.textContent = // \"size:<width> <height>\" is what we need. But also add \"A4\" because\n    // Firefox incorrectly reports support for the other value.\n    '@supports ((size:A4) and (size:1pt 1pt)) {' + '@page { size: ' + pageSize.width + 'pt ' + pageSize.height + 'pt;}' + '}';\n    body.appendChild(this.pageStyleSheet);\n  },\n  destroy: function destroy() {\n    if (activeService !== this) {\n      // |activeService| cannot be replaced without calling destroy() first,\n      // so if it differs then an external consumer has a stale reference to\n      // us.\n      return;\n    }\n\n    this.printContainer.textContent = '';\n    var body = document.querySelector('body');\n    body.removeAttribute('data-pdfjsprinting');\n\n    if (this.pageStyleSheet) {\n      this.pageStyleSheet.remove();\n      this.pageStyleSheet = null;\n    }\n\n    this.scratchCanvas.width = this.scratchCanvas.height = 0;\n    this.scratchCanvas = null;\n    activeService = null;\n    ensureOverlay().then(function () {\n      if (overlayManager.active !== 'printServiceOverlay') {\n        return; // overlay was already closed\n      }\n\n      overlayManager.close('printServiceOverlay');\n    });\n  },\n  renderPages: function renderPages() {\n    var _this = this;\n\n    var pageCount = this.pagesOverview.length;\n\n    var renderNextPage = function renderNextPage(resolve, reject) {\n      _this.throwIfInactive();\n\n      if (++_this.currentPage >= pageCount) {\n        renderProgress(pageCount, pageCount, _this.l10n);\n        resolve();\n        return;\n      }\n\n      var index = _this.currentPage;\n      renderProgress(index, pageCount, _this.l10n);\n      renderPage(_this, _this.pdfDocument, index + 1, _this.pagesOverview[index]).then(_this.useRenderedPage.bind(_this)).then(function () {\n        renderNextPage(resolve, reject);\n      }, reject);\n    };\n\n    return new Promise(renderNextPage);\n  },\n  useRenderedPage: function useRenderedPage(printItem) {\n    this.throwIfInactive();\n    var img = document.createElement('img');\n    img.style.width = printItem.width;\n    img.style.height = printItem.height;\n    var scratchCanvas = this.scratchCanvas;\n\n    if ('toBlob' in scratchCanvas && !this.disableCreateObjectURL) {\n      scratchCanvas.toBlob(function (blob) {\n        img.src = URL.createObjectURL(blob);\n      });\n    } else {\n      img.src = scratchCanvas.toDataURL();\n    }\n\n    var wrapper = document.createElement('div');\n    wrapper.appendChild(img);\n    this.printContainer.appendChild(wrapper);\n    return new Promise(function (resolve, reject) {\n      img.onload = resolve;\n      img.onerror = reject;\n    });\n  },\n  performPrint: function performPrint() {\n    var _this2 = this;\n\n    this.throwIfInactive();\n    return new Promise(function (resolve) {\n      // Push window.print in the macrotask queue to avoid being affected by\n      // the deprecation of running print() code in a microtask, see\n      // https://github.com/mozilla/pdf.js/issues/7547.\n      setTimeout(function () {\n        if (!_this2.active) {\n          resolve();\n          return;\n        }\n\n        print.call(window); // Delay promise resolution in case print() was not synchronous.\n\n        setTimeout(resolve, 20); // Tidy-up.\n      }, 0);\n    });\n  },\n\n  get active() {\n    return this === activeService;\n  },\n\n  throwIfInactive: function throwIfInactive() {\n    if (!this.active) {\n      throw new Error('This print request was cancelled or completed.');\n    }\n  }\n};\nvar print = window.print;\n\nwindow.print = function print() {\n  if (activeService) {\n    console.warn('Ignored window.print() because of a pending print job.');\n    return;\n  }\n\n  ensureOverlay().then(function () {\n    if (activeService) {\n      overlayManager.open('printServiceOverlay');\n    }\n  });\n\n  try {\n    dispatchEvent('beforeprint');\n  } finally {\n    if (!activeService) {\n      console.error('Expected print service to be initialized.');\n      ensureOverlay().then(function () {\n        if (overlayManager.active === 'printServiceOverlay') {\n          overlayManager.close('printServiceOverlay');\n        }\n      });\n      return; // eslint-disable-line no-unsafe-finally\n    }\n\n    var activeServiceOnEntry = activeService;\n    activeService.renderPages().then(function () {\n      return activeServiceOnEntry.performPrint();\n    }).catch(function () {// Ignore any error messages.\n    }).then(function () {\n      // aborts acts on the \"active\" print request, so we need to check\n      // whether the print request (activeServiceOnEntry) is still active.\n      // Without the check, an unrelated print request (created after aborting\n      // this print request while the pages were being generated) would be\n      // aborted.\n      if (activeServiceOnEntry.active) {\n        abort();\n      }\n    });\n  }\n};\n\nfunction dispatchEvent(eventType) {\n  var event = document.createEvent('CustomEvent');\n  event.initCustomEvent(eventType, false, false, 'custom');\n  window.dispatchEvent(event);\n}\n\nfunction abort() {\n  if (activeService) {\n    activeService.destroy();\n    dispatchEvent('afterprint');\n  }\n}\n\nfunction renderProgress(index, total, l10n) {\n  var progressContainer = document.getElementById('printServiceOverlay');\n  var progress = Math.round(100 * index / total);\n  var progressBar = progressContainer.querySelector('progress');\n  var progressPerc = progressContainer.querySelector('.relative-progress');\n  progressBar.value = progress;\n  l10n.get('print_progress_percent', {\n    progress: progress\n  }, progress + '%').then(function (msg) {\n    progressPerc.textContent = msg;\n  });\n}\n\nvar hasAttachEvent = !!document.attachEvent;\nwindow.addEventListener('keydown', function (event) {\n  // Intercept Cmd/Ctrl + P in all browsers.\n  // Also intercept Cmd/Ctrl + Shift + P in Chrome and Opera\n  if (event.keyCode ===\n  /* P= */\n  80 && (event.ctrlKey || event.metaKey) && !event.altKey && (!event.shiftKey || window.chrome || window.opera)) {\n    window.print();\n\n    if (hasAttachEvent) {\n      // Only attachEvent can cancel Ctrl + P dialog in IE <=10\n      // attachEvent is gone in IE11, so the dialog will re-appear in IE11.\n      return;\n    }\n\n    event.preventDefault();\n\n    if (event.stopImmediatePropagation) {\n      event.stopImmediatePropagation();\n    } else {\n      event.stopPropagation();\n    }\n  }\n}, true);\n\nif (hasAttachEvent) {\n  // eslint-disable-next-line consistent-return\n  document.attachEvent('onkeydown', function (event) {\n    event = event || window.event;\n\n    if (event.keyCode ===\n    /* P= */\n    80 && event.ctrlKey) {\n      event.keyCode = 0;\n      return false;\n    }\n  });\n}\n\nif ('onbeforeprint' in window) {\n  // Do not propagate before/afterprint events when they are not triggered\n  // from within this polyfill. (FF /IE / Chrome 63+).\n  var stopPropagationIfNeeded = function stopPropagationIfNeeded(event) {\n    if (event.detail !== 'custom' && event.stopImmediatePropagation) {\n      event.stopImmediatePropagation();\n    }\n  };\n\n  window.addEventListener('beforeprint', stopPropagationIfNeeded);\n  window.addEventListener('afterprint', stopPropagationIfNeeded);\n}\n\nvar overlayPromise;\n\nfunction ensureOverlay() {\n  if (!overlayPromise) {\n    overlayManager = _app.PDFViewerApplication.overlayManager;\n\n    if (!overlayManager) {\n      throw new Error('The overlay manager has not yet been initialized.');\n    }\n\n    overlayPromise = overlayManager.register('printServiceOverlay', document.getElementById('printServiceOverlay'), abort, true);\n    document.getElementById('printCancel').onclick = abort;\n  }\n\n  return overlayPromise;\n}\n\n_app.PDFPrintServiceFactory.instance = {\n  supportsPrinting: true,\n  createPrintService: function createPrintService(pdfDocument, pagesOverview, printContainer, l10n) {\n    if (activeService) {\n      throw new Error('The print service is created and active.');\n    }\n\n    activeService = new PDFPrintService(pdfDocument, pagesOverview, printContainer, l10n);\n    return activeService;\n  }\n};",null]}