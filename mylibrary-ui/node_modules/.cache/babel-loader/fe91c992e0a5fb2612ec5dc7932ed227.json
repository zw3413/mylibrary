{"remainingRequest":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/web/pdf_sidebar.js","dependencies":[{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/web/pdf_sidebar.js","mtime":1577806166000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PDFSidebar = exports.SidebarView = void 0;\n\nvar _ui_utils = require(\"./ui_utils\");\n\nvar _pdf_rendering_queue = require(\"./pdf_rendering_queue\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar UI_NOTIFICATION_CLASS = 'pdfSidebarNotification';\nvar SidebarView = {\n  UNKNOWN: -1,\n  NONE: 0,\n  THUMBS: 1,\n  // Default value.\n  OUTLINE: 2,\n  ATTACHMENTS: 3,\n  LAYERS: 4\n};\n/**\n * @typedef {Object} PDFSidebarOptions\n * @property {PDFSidebarElements} elements - The DOM elements.\n * @property {PDFViewer} pdfViewer - The document viewer.\n * @property {PDFThumbnailViewer} pdfThumbnailViewer - The thumbnail viewer.\n * @property {EventBus} eventBus - The application event bus.\n * @property {IL10n} l10n - The localization service.\n * @property {boolean} [disableNotification] - Disable the notification for\n *   documents containing outline/attachments. The default value is `false`.\n */\n\n/**\n * @typedef {Object} PDFSidebarElements\n * @property {HTMLDivElement} outerContainer - The outer container\n *   (encasing both the viewer and sidebar elements).\n * @property {HTMLDivElement} viewerContainer - The viewer container\n *   (in which the viewer element is placed).\n * @property {HTMLButtonElement} toggleButton - The button used for\n *   opening/closing the sidebar.\n * @property {HTMLButtonElement} thumbnailButton - The button used to show\n *   the thumbnail view.\n * @property {HTMLButtonElement} outlineButton - The button used to show\n *   the outline view.\n * @property {HTMLButtonElement} attachmentsButton - The button used to show\n *   the attachments view.\n * @property {HTMLDivElement} thumbnailView - The container in which\n *   the thumbnails are placed.\n * @property {HTMLDivElement} outlineView - The container in which\n *   the outline is placed.\n * @property {HTMLDivElement} attachmentsView - The container in which\n *   the attachments are placed.\n */\n\nexports.SidebarView = SidebarView;\n\nvar PDFSidebar =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {PDFSidebarOptions} options\n   */\n  function PDFSidebar(_ref) {\n    var elements = _ref.elements,\n        pdfViewer = _ref.pdfViewer,\n        pdfThumbnailViewer = _ref.pdfThumbnailViewer,\n        eventBus = _ref.eventBus,\n        _ref$l10n = _ref.l10n,\n        l10n = _ref$l10n === void 0 ? _ui_utils.NullL10n : _ref$l10n,\n        _ref$disableNotificat = _ref.disableNotification,\n        disableNotification = _ref$disableNotificat === void 0 ? false : _ref$disableNotificat;\n\n    _classCallCheck(this, PDFSidebar);\n\n    this.isOpen = false;\n    this.active = SidebarView.THUMBS;\n    this.isInitialViewSet = false;\n    /**\n     * Callback used when the sidebar has been opened/closed, to ensure that\n     * the viewers (PDFViewer/PDFThumbnailViewer) are updated correctly.\n     */\n\n    this.onToggled = null;\n    this.pdfViewer = pdfViewer;\n    this.pdfThumbnailViewer = pdfThumbnailViewer;\n    this.outerContainer = elements.outerContainer;\n    this.viewerContainer = elements.viewerContainer;\n    this.toggleButton = elements.toggleButton;\n    this.thumbnailButton = elements.thumbnailButton;\n    this.outlineButton = elements.outlineButton;\n    this.attachmentsButton = elements.attachmentsButton;\n    this.thumbnailView = elements.thumbnailView;\n    this.outlineView = elements.outlineView;\n    this.attachmentsView = elements.attachmentsView;\n    this.eventBus = eventBus;\n    this.l10n = l10n;\n    this._disableNotification = disableNotification;\n\n    this._addEventListeners();\n  }\n\n  _createClass(PDFSidebar, [{\n    key: \"reset\",\n    value: function reset() {\n      this.isInitialViewSet = false;\n\n      this._hideUINotification(null);\n\n      this.switchView(SidebarView.THUMBS);\n      this.outlineButton.disabled = false;\n      this.attachmentsButton.disabled = false;\n    }\n    /**\n     * @type {number} One of the values in {SidebarView}.\n     */\n\n  }, {\n    key: \"setInitialView\",\n\n    /**\n     * @param {number} view - The sidebar view that should become visible,\n     *                        must be one of the values in {SidebarView}.\n     */\n    value: function setInitialView() {\n      var view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SidebarView.NONE;\n\n      if (this.isInitialViewSet) {\n        return;\n      }\n\n      this.isInitialViewSet = true; // If the user has already manually opened the sidebar, immediately closing\n      // it would be bad UX; also ignore the \"unknown\" sidebar view value.\n\n      if (view === SidebarView.NONE || view === SidebarView.UNKNOWN) {\n        this._dispatchEvent();\n\n        return;\n      } // Prevent dispatching two back-to-back `sidebarviewchanged` events,\n      // since `this._switchView` dispatched the event if the view changed.\n\n\n      if (!this._switchView(view,\n      /* forceOpen */\n      true)) {\n        this._dispatchEvent();\n      }\n    }\n    /**\n     * @param {number} view - The sidebar view that should be switched to,\n     *                        must be one of the values in {SidebarView}.\n     * @param {boolean} [forceOpen] - Ensure that the sidebar is open.\n     *                                The default value is `false`.\n     */\n\n  }, {\n    key: \"switchView\",\n    value: function switchView(view) {\n      var forceOpen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      this._switchView(view, forceOpen);\n    }\n    /**\n     * @returns {boolean} Indicating if `this._dispatchEvent` was called.\n     * @private\n     */\n\n  }, {\n    key: \"_switchView\",\n    value: function _switchView(view) {\n      var forceOpen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var isViewChanged = view !== this.active;\n      var shouldForceRendering = false;\n\n      switch (view) {\n        case SidebarView.NONE:\n          if (this.isOpen) {\n            this.close();\n            return true; // Closing will trigger rendering and dispatch the event.\n          }\n\n          return false;\n\n        case SidebarView.THUMBS:\n          if (this.isOpen && isViewChanged) {\n            shouldForceRendering = true;\n          }\n\n          break;\n\n        case SidebarView.OUTLINE:\n          if (this.outlineButton.disabled) {\n            return false;\n          }\n\n          break;\n\n        case SidebarView.ATTACHMENTS:\n          if (this.attachmentsButton.disabled) {\n            return false;\n          }\n\n          break;\n\n        default:\n          console.error(\"PDFSidebar._switchView: \\\"\".concat(view, \"\\\" is not a valid view.\"));\n          return false;\n      } // Update the active view *after* it has been validated above,\n      // in order to prevent setting it to an invalid state.\n\n\n      this.active = view; // Update the CSS classes, for all buttons...\n\n      this.thumbnailButton.classList.toggle('toggled', view === SidebarView.THUMBS);\n      this.outlineButton.classList.toggle('toggled', view === SidebarView.OUTLINE);\n      this.attachmentsButton.classList.toggle('toggled', view === SidebarView.ATTACHMENTS); // ... and for all views.\n\n      this.thumbnailView.classList.toggle('hidden', view !== SidebarView.THUMBS);\n      this.outlineView.classList.toggle('hidden', view !== SidebarView.OUTLINE);\n      this.attachmentsView.classList.toggle('hidden', view !== SidebarView.ATTACHMENTS);\n\n      if (forceOpen && !this.isOpen) {\n        this.open();\n        return true; // Opening will trigger rendering and dispatch the event.\n      }\n\n      if (shouldForceRendering) {\n        this._updateThumbnailViewer();\n\n        this._forceRendering();\n      }\n\n      if (isViewChanged) {\n        this._dispatchEvent();\n      }\n\n      this._hideUINotification(this.active);\n\n      return isViewChanged;\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      if (this.isOpen) {\n        return;\n      }\n\n      this.isOpen = true;\n      this.toggleButton.classList.add('toggled');\n      this.outerContainer.classList.add('sidebarMoving', 'sidebarOpen');\n\n      if (this.active === SidebarView.THUMBS) {\n        this._updateThumbnailViewer();\n      }\n\n      this._forceRendering();\n\n      this._dispatchEvent();\n\n      this._hideUINotification(this.active);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (!this.isOpen) {\n        return;\n      }\n\n      this.isOpen = false;\n      this.toggleButton.classList.remove('toggled');\n      this.outerContainer.classList.add('sidebarMoving');\n      this.outerContainer.classList.remove('sidebarOpen');\n\n      this._forceRendering();\n\n      this._dispatchEvent();\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      if (this.isOpen) {\n        this.close();\n      } else {\n        this.open();\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_dispatchEvent\",\n    value: function _dispatchEvent() {\n      this.eventBus.dispatch('sidebarviewchanged', {\n        source: this,\n        view: this.visibleView\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_forceRendering\",\n    value: function _forceRendering() {\n      if (this.onToggled) {\n        this.onToggled();\n      } else {\n        // Fallback\n        this.pdfViewer.forceRendering();\n        this.pdfThumbnailViewer.forceRendering();\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_updateThumbnailViewer\",\n    value: function _updateThumbnailViewer() {\n      var pdfViewer = this.pdfViewer,\n          pdfThumbnailViewer = this.pdfThumbnailViewer; // Use the rendered pages to set the corresponding thumbnail images.\n\n      var pagesCount = pdfViewer.pagesCount;\n\n      for (var pageIndex = 0; pageIndex < pagesCount; pageIndex++) {\n        var pageView = pdfViewer.getPageView(pageIndex);\n\n        if (pageView && pageView.renderingState === _pdf_rendering_queue.RenderingStates.FINISHED) {\n          var thumbnailView = pdfThumbnailViewer.getThumbnail(pageIndex);\n          thumbnailView.setImage(pageView);\n        }\n      }\n\n      pdfThumbnailViewer.scrollThumbnailIntoView(pdfViewer.currentPageNumber);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_showUINotification\",\n    value: function _showUINotification(view) {\n      var _this = this;\n\n      if (this._disableNotification) {\n        return;\n      }\n\n      this.l10n.get('toggle_sidebar_notification.title', null, 'Toggle Sidebar (document contains outline/attachments)').then(function (msg) {\n        _this.toggleButton.title = msg;\n      });\n\n      if (!this.isOpen) {\n        // Only show the notification on the `toggleButton` if the sidebar is\n        // currently closed, to avoid unnecessarily bothering the user.\n        this.toggleButton.classList.add(UI_NOTIFICATION_CLASS);\n      } else if (view === this.active) {\n        // If the sidebar is currently open *and* the `view` is visible, do not\n        // bother the user with a notification on the corresponding button.\n        return;\n      }\n\n      switch (view) {\n        case SidebarView.OUTLINE:\n          this.outlineButton.classList.add(UI_NOTIFICATION_CLASS);\n          break;\n\n        case SidebarView.ATTACHMENTS:\n          this.attachmentsButton.classList.add(UI_NOTIFICATION_CLASS);\n          break;\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_hideUINotification\",\n    value: function _hideUINotification(view) {\n      var _this2 = this;\n\n      if (this._disableNotification) {\n        return;\n      }\n\n      var removeNotification = function removeNotification(view) {\n        switch (view) {\n          case SidebarView.OUTLINE:\n            _this2.outlineButton.classList.remove(UI_NOTIFICATION_CLASS);\n\n            break;\n\n          case SidebarView.ATTACHMENTS:\n            _this2.attachmentsButton.classList.remove(UI_NOTIFICATION_CLASS);\n\n            break;\n        }\n      };\n\n      if (!this.isOpen && view !== null) {\n        // Only hide the notifications when the sidebar is currently open,\n        // or when it is being reset (i.e. `view === null`).\n        return;\n      }\n\n      this.toggleButton.classList.remove(UI_NOTIFICATION_CLASS);\n\n      if (view !== null) {\n        removeNotification(view);\n        return;\n      }\n\n      for (view in SidebarView) {\n        // Remove all sidebar notifications on reset.\n        removeNotification(SidebarView[view]);\n      }\n\n      this.l10n.get('toggle_sidebar.title', null, 'Toggle Sidebar').then(function (msg) {\n        _this2.toggleButton.title = msg;\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_addEventListeners\",\n    value: function _addEventListeners() {\n      var _this3 = this;\n\n      this.viewerContainer.addEventListener('transitionend', function (evt) {\n        if (evt.target === _this3.viewerContainer) {\n          _this3.outerContainer.classList.remove('sidebarMoving');\n        }\n      });\n      this.toggleButton.addEventListener('click', function () {\n        _this3.toggle();\n      }); // Buttons for switching views.\n\n      this.thumbnailButton.addEventListener('click', function () {\n        _this3.switchView(SidebarView.THUMBS);\n      });\n      this.outlineButton.addEventListener('click', function () {\n        _this3.switchView(SidebarView.OUTLINE);\n      });\n      this.outlineButton.addEventListener('dblclick', function () {\n        _this3.eventBus.dispatch('toggleoutlinetree', {\n          source: _this3\n        });\n      });\n      this.attachmentsButton.addEventListener('click', function () {\n        _this3.switchView(SidebarView.ATTACHMENTS);\n      }); // Disable/enable views.\n\n      this.eventBus.on('outlineloaded', function (evt) {\n        var outlineCount = evt.outlineCount;\n        _this3.outlineButton.disabled = !outlineCount;\n\n        if (outlineCount) {\n          _this3._showUINotification(SidebarView.OUTLINE);\n        } else if (_this3.active === SidebarView.OUTLINE) {\n          // If the outline view was opened during document load, switch away\n          // from it if it turns out that the document has no outline.\n          _this3.switchView(SidebarView.THUMBS);\n        }\n      });\n      this.eventBus.on('attachmentsloaded', function (evt) {\n        if (evt.attachmentsCount) {\n          _this3.attachmentsButton.disabled = false;\n\n          _this3._showUINotification(SidebarView.ATTACHMENTS);\n\n          return;\n        } // Attempt to avoid temporarily disabling, and switching away from, the\n        // attachment view for documents that do not contain proper attachments\n        // but *only* FileAttachment annotations. Hence we defer those operations\n        // slightly to allow time for parsing any FileAttachment annotations that\n        // may be present on the *initially* rendered page of the document.\n\n\n        Promise.resolve().then(function () {\n          if (_this3.attachmentsView.hasChildNodes()) {\n            // FileAttachment annotations were appended to the attachment view.\n            return;\n          }\n\n          _this3.attachmentsButton.disabled = true;\n\n          if (_this3.active === SidebarView.ATTACHMENTS) {\n            // If the attachment view was opened during document load, switch away\n            // from it if it turns out that the document has no attachments.\n            _this3.switchView(SidebarView.THUMBS);\n          }\n        });\n      }); // Update the thumbnailViewer, if visible, when exiting presentation mode.\n\n      this.eventBus.on('presentationmodechanged', function (evt) {\n        if (!evt.active && !evt.switchInProgress && _this3.isThumbnailViewVisible) {\n          _this3._updateThumbnailViewer();\n        }\n      });\n    }\n  }, {\n    key: \"visibleView\",\n    get: function get() {\n      return this.isOpen ? this.active : SidebarView.NONE;\n    }\n  }, {\n    key: \"isThumbnailViewVisible\",\n    get: function get() {\n      return this.isOpen && this.active === SidebarView.THUMBS;\n    }\n  }, {\n    key: \"isOutlineViewVisible\",\n    get: function get() {\n      return this.isOpen && this.active === SidebarView.OUTLINE;\n    }\n  }, {\n    key: \"isAttachmentsViewVisible\",\n    get: function get() {\n      return this.isOpen && this.active === SidebarView.ATTACHMENTS;\n    }\n  }]);\n\n  return PDFSidebar;\n}();\n\nexports.PDFSidebar = PDFSidebar;",null]}