{"remainingRequest":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/weizhang/JAVASHOP/vue-admin-template-master/src/statics/viewer/pdf/web/secondary_toolbar.js","dependencies":[{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/src/statics/viewer/pdf/web/secondary_toolbar.js","mtime":1577806166000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SecondaryToolbar = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _ui_utils = require(\"./ui_utils\");\n\nvar _pdf_cursor_tools = require(\"./pdf_cursor_tools\");\n\nvar _pdf_single_page_viewer = require(\"./pdf_single_page_viewer\");\n\n/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {Object} SecondaryToolbarOptions\n * @property {HTMLDivElement} toolbar - Container for the secondary toolbar.\n * @property {HTMLButtonElement} toggleButton - Button to toggle the visibility\n *   of the secondary toolbar.\n * @property {HTMLDivElement} toolbarButtonContainer - Container where all the\n *   toolbar buttons are placed. The maximum height of the toolbar is controlled\n *   dynamically by adjusting the 'max-height' CSS property of this DOM element.\n * @property {HTMLButtonElement} presentationModeButton - Button for entering\n *   presentation mode.\n * @property {HTMLButtonElement} openFileButton - Button to open a file.\n * @property {HTMLButtonElement} printButton - Button to print the document.\n * @property {HTMLButtonElement} downloadButton - Button to download the\n *   document.\n * @property {HTMLLinkElement} viewBookmarkButton - Button to obtain a bookmark\n *   link to the current location in the document.\n * @property {HTMLButtonElement} firstPageButton - Button to go to the first\n *   page in the document.\n * @property {HTMLButtonElement} lastPageButton - Button to go to the last page\n *   in the document.\n * @property {HTMLButtonElement} pageRotateCwButton - Button to rotate the pages\n *   clockwise.\n * @property {HTMLButtonElement} pageRotateCcwButton - Button to rotate the\n *   pages counterclockwise.\n * @property {HTMLButtonElement} cursorSelectToolButton - Button to enable the\n *   select tool.\n * @property {HTMLButtonElement} cursorHandToolButton - Button to enable the\n *   hand tool.\n * @property {HTMLButtonElement} documentPropertiesButton - Button for opening\n *   the document properties dialog.\n */\nvar SecondaryToolbar =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {SecondaryToolbarOptions} options\n   * @param {HTMLDivElement} mainContainer\n   * @param {EventBus} eventBus\n   */\n  function SecondaryToolbar(options, mainContainer, eventBus) {\n    var _this = this;\n\n    (0, _classCallCheck2.default)(this, SecondaryToolbar);\n    this.toolbar = options.toolbar;\n    this.toggleButton = options.toggleButton;\n    this.toolbarButtonContainer = options.toolbarButtonContainer;\n    this.buttons = [{\n      element: options.presentationModeButton,\n      eventName: 'presentationmode',\n      close: true\n    }, {\n      element: options.openFileButton,\n      eventName: 'openfile',\n      close: true\n    }, {\n      element: options.printButton,\n      eventName: 'print',\n      close: true\n    }, {\n      element: options.downloadButton,\n      eventName: 'download',\n      close: true\n    }, {\n      element: options.viewBookmarkButton,\n      eventName: null,\n      close: true\n    }, {\n      element: options.firstPageButton,\n      eventName: 'firstpage',\n      close: true\n    }, {\n      element: options.lastPageButton,\n      eventName: 'lastpage',\n      close: true\n    }, {\n      element: options.pageRotateCwButton,\n      eventName: 'rotatecw',\n      close: false\n    }, {\n      element: options.pageRotateCcwButton,\n      eventName: 'rotateccw',\n      close: false\n    }, {\n      element: options.cursorSelectToolButton,\n      eventName: 'switchcursortool',\n      eventDetails: {\n        tool: _pdf_cursor_tools.CursorTool.SELECT\n      },\n      close: true\n    }, {\n      element: options.cursorHandToolButton,\n      eventName: 'switchcursortool',\n      eventDetails: {\n        tool: _pdf_cursor_tools.CursorTool.HAND\n      },\n      close: true\n    }, {\n      element: options.scrollVerticalButton,\n      eventName: 'switchscrollmode',\n      eventDetails: {\n        mode: _ui_utils.ScrollMode.VERTICAL\n      },\n      close: true\n    }, {\n      element: options.scrollHorizontalButton,\n      eventName: 'switchscrollmode',\n      eventDetails: {\n        mode: _ui_utils.ScrollMode.HORIZONTAL\n      },\n      close: true\n    }, {\n      element: options.scrollWrappedButton,\n      eventName: 'switchscrollmode',\n      eventDetails: {\n        mode: _ui_utils.ScrollMode.WRAPPED\n      },\n      close: true\n    }, {\n      element: options.spreadNoneButton,\n      eventName: 'switchspreadmode',\n      eventDetails: {\n        mode: _ui_utils.SpreadMode.NONE\n      },\n      close: true\n    }, {\n      element: options.spreadOddButton,\n      eventName: 'switchspreadmode',\n      eventDetails: {\n        mode: _ui_utils.SpreadMode.ODD\n      },\n      close: true\n    }, {\n      element: options.spreadEvenButton,\n      eventName: 'switchspreadmode',\n      eventDetails: {\n        mode: _ui_utils.SpreadMode.EVEN\n      },\n      close: true\n    }, {\n      element: options.documentPropertiesButton,\n      eventName: 'documentproperties',\n      close: true\n    }];\n    this.items = {\n      firstPage: options.firstPageButton,\n      lastPage: options.lastPageButton,\n      pageRotateCw: options.pageRotateCwButton,\n      pageRotateCcw: options.pageRotateCcwButton\n    };\n    this.mainContainer = mainContainer;\n    this.eventBus = eventBus;\n    this.opened = false;\n    this.containerHeight = null;\n    this.previousContainerHeight = null;\n    this.reset(); // Bind the event listeners for click, cursor tool, and scroll/spread mode\n    // actions.\n\n    this._bindClickListeners();\n\n    this._bindCursorToolsListener(options);\n\n    this._bindScrollModeListener(options);\n\n    this._bindSpreadModeListener(options); // Bind the event listener for adjusting the 'max-height' of the toolbar.\n\n\n    this.eventBus.on('resize', this._setMaxHeight.bind(this)); // Hide the Scroll/Spread mode buttons, when they're not applicable to the\n    // current `BaseViewer` instance (in particular `PDFSinglePageViewer`).\n\n    this.eventBus.on('baseviewerinit', function (evt) {\n      if (evt.source instanceof _pdf_single_page_viewer.PDFSinglePageViewer) {\n        _this.toolbarButtonContainer.classList.add('hiddenScrollModeButtons', 'hiddenSpreadModeButtons');\n      } else {\n        _this.toolbarButtonContainer.classList.remove('hiddenScrollModeButtons', 'hiddenSpreadModeButtons');\n      }\n    });\n  }\n  /**\n   * @type {boolean}\n   */\n\n\n  (0, _createClass2.default)(SecondaryToolbar, [{\n    key: \"setPageNumber\",\n    value: function setPageNumber(pageNumber) {\n      this.pageNumber = pageNumber;\n\n      this._updateUIState();\n    }\n  }, {\n    key: \"setPagesCount\",\n    value: function setPagesCount(pagesCount) {\n      this.pagesCount = pagesCount;\n\n      this._updateUIState();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.pageNumber = 0;\n      this.pagesCount = 0;\n\n      this._updateUIState(); // Reset the Scroll/Spread buttons too, since they're document specific.\n\n\n      this.eventBus.dispatch('secondarytoolbarreset', {\n        source: this\n      });\n    }\n  }, {\n    key: \"_updateUIState\",\n    value: function _updateUIState() {\n      this.items.firstPage.disabled = this.pageNumber <= 1;\n      this.items.lastPage.disabled = this.pageNumber >= this.pagesCount;\n      this.items.pageRotateCw.disabled = this.pagesCount === 0;\n      this.items.pageRotateCcw.disabled = this.pagesCount === 0;\n    }\n  }, {\n    key: \"_bindClickListeners\",\n    value: function _bindClickListeners() {\n      var _this2 = this;\n\n      // Button to toggle the visibility of the secondary toolbar.\n      this.toggleButton.addEventListener('click', this.toggle.bind(this)); // All items within the secondary toolbar.\n\n      var _loop = function _loop(button) {\n        var _this2$buttons$button = _this2.buttons[button],\n            element = _this2$buttons$button.element,\n            eventName = _this2$buttons$button.eventName,\n            close = _this2$buttons$button.close,\n            eventDetails = _this2$buttons$button.eventDetails;\n        element.addEventListener('click', function (evt) {\n          if (eventName !== null) {\n            var details = {\n              source: _this2\n            };\n\n            for (var property in eventDetails) {\n              details[property] = eventDetails[property];\n            }\n\n            _this2.eventBus.dispatch(eventName, details);\n          }\n\n          if (close) {\n            _this2.close();\n          }\n        });\n      };\n\n      for (var button in this.buttons) {\n        _loop(button);\n      }\n    }\n  }, {\n    key: \"_bindCursorToolsListener\",\n    value: function _bindCursorToolsListener(buttons) {\n      this.eventBus.on('cursortoolchanged', function (_ref) {\n        var tool = _ref.tool;\n        buttons.cursorSelectToolButton.classList.toggle('toggled', tool === _pdf_cursor_tools.CursorTool.SELECT);\n        buttons.cursorHandToolButton.classList.toggle('toggled', tool === _pdf_cursor_tools.CursorTool.HAND);\n      });\n    }\n  }, {\n    key: \"_bindScrollModeListener\",\n    value: function _bindScrollModeListener(buttons) {\n      var _this3 = this;\n\n      function scrollModeChanged(_ref2) {\n        var mode = _ref2.mode;\n        buttons.scrollVerticalButton.classList.toggle('toggled', mode === _ui_utils.ScrollMode.VERTICAL);\n        buttons.scrollHorizontalButton.classList.toggle('toggled', mode === _ui_utils.ScrollMode.HORIZONTAL);\n        buttons.scrollWrappedButton.classList.toggle('toggled', mode === _ui_utils.ScrollMode.WRAPPED); // Temporarily *disable* the Spread buttons when horizontal scrolling is\n        // enabled, since the non-default Spread modes doesn't affect the layout.\n\n        var isScrollModeHorizontal = mode === _ui_utils.ScrollMode.HORIZONTAL;\n        buttons.spreadNoneButton.disabled = isScrollModeHorizontal;\n        buttons.spreadOddButton.disabled = isScrollModeHorizontal;\n        buttons.spreadEvenButton.disabled = isScrollModeHorizontal;\n      }\n\n      this.eventBus.on('scrollmodechanged', scrollModeChanged);\n      this.eventBus.on('secondarytoolbarreset', function (evt) {\n        if (evt.source === _this3) {\n          scrollModeChanged({\n            mode: _ui_utils.ScrollMode.VERTICAL\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_bindSpreadModeListener\",\n    value: function _bindSpreadModeListener(buttons) {\n      var _this4 = this;\n\n      function spreadModeChanged(_ref3) {\n        var mode = _ref3.mode;\n        buttons.spreadNoneButton.classList.toggle('toggled', mode === _ui_utils.SpreadMode.NONE);\n        buttons.spreadOddButton.classList.toggle('toggled', mode === _ui_utils.SpreadMode.ODD);\n        buttons.spreadEvenButton.classList.toggle('toggled', mode === _ui_utils.SpreadMode.EVEN);\n      }\n\n      this.eventBus.on('spreadmodechanged', spreadModeChanged);\n      this.eventBus.on('secondarytoolbarreset', function (evt) {\n        if (evt.source === _this4) {\n          spreadModeChanged({\n            mode: _ui_utils.SpreadMode.NONE\n          });\n        }\n      });\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      if (this.opened) {\n        return;\n      }\n\n      this.opened = true;\n\n      this._setMaxHeight();\n\n      this.toggleButton.classList.add('toggled');\n      this.toolbar.classList.remove('hidden');\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (!this.opened) {\n        return;\n      }\n\n      this.opened = false;\n      this.toolbar.classList.add('hidden');\n      this.toggleButton.classList.remove('toggled');\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      if (this.opened) {\n        this.close();\n      } else {\n        this.open();\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_setMaxHeight\",\n    value: function _setMaxHeight() {\n      if (!this.opened) {\n        return; // Only adjust the 'max-height' if the toolbar is visible.\n      }\n\n      this.containerHeight = this.mainContainer.clientHeight;\n\n      if (this.containerHeight === this.previousContainerHeight) {\n        return;\n      }\n\n      this.toolbarButtonContainer.setAttribute('style', 'max-height: ' + (this.containerHeight - _ui_utils.SCROLLBAR_PADDING) + 'px;');\n      this.previousContainerHeight = this.containerHeight;\n    }\n  }, {\n    key: \"isOpen\",\n    get: function get() {\n      return this.opened;\n    }\n  }]);\n  return SecondaryToolbar;\n}();\n\nexports.SecondaryToolbar = SecondaryToolbar;",null]}