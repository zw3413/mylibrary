{"remainingRequest":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/thread-loader/dist/cjs.js!/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/web/firefox_print_service.js","dependencies":[{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/web/firefox_print_service.js","mtime":1577806166000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["/* Copyright 2016 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AppOptions } from './app_options';\nimport { CSS_UNITS } from './ui_utils';\nimport { PDFPrintServiceFactory } from './app';\nimport { shadow } from 'pdfjs-dist'; // Creates a placeholder with div and canvas with right size for the page.\n\nfunction composePage(pdfDocument, pageNumber, size, printContainer) {\n  var canvas = document.createElement('canvas'); // The size of the canvas in pixels for printing.\n\n  var PRINT_RESOLUTION = AppOptions.get('printResolution') || 150;\n  var PRINT_UNITS = PRINT_RESOLUTION / 72.0;\n  canvas.width = Math.floor(size.width * PRINT_UNITS);\n  canvas.height = Math.floor(size.height * PRINT_UNITS); // The physical size of the canvas as specified by the PDF document.\n\n  canvas.style.width = Math.floor(size.width * CSS_UNITS) + 'px';\n  canvas.style.height = Math.floor(size.height * CSS_UNITS) + 'px';\n  var canvasWrapper = document.createElement('div');\n  canvasWrapper.appendChild(canvas);\n  printContainer.appendChild(canvasWrapper);\n\n  canvas.mozPrintCallback = function (obj) {\n    // Printing/rendering the page.\n    var ctx = obj.context;\n    ctx.save();\n    ctx.fillStyle = 'rgb(255, 255, 255)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n    pdfDocument.getPage(pageNumber).then(function (pdfPage) {\n      var renderContext = {\n        canvasContext: ctx,\n        transform: [PRINT_UNITS, 0, 0, PRINT_UNITS, 0, 0],\n        viewport: pdfPage.getViewport({\n          scale: 1,\n          rotation: size.rotation\n        }),\n        intent: 'print'\n      };\n      return pdfPage.render(renderContext).promise;\n    }).then(function () {\n      // Tell the printEngine that rendering this canvas/page has finished.\n      obj.done();\n    }, function (error) {\n      console.error(error); // Tell the printEngine that rendering this canvas/page has failed.\n      // This will make the print process stop.\n\n      if ('abort' in obj) {\n        obj.abort();\n      } else {\n        obj.done();\n      }\n    });\n  };\n}\n\nfunction FirefoxPrintService(pdfDocument, pagesOverview, printContainer) {\n  this.pdfDocument = pdfDocument;\n  this.pagesOverview = pagesOverview;\n  this.printContainer = printContainer;\n}\n\nFirefoxPrintService.prototype = {\n  layout: function layout() {\n    var pdfDocument = this.pdfDocument,\n        pagesOverview = this.pagesOverview,\n        printContainer = this.printContainer;\n    var body = document.querySelector('body');\n    body.setAttribute('data-pdfjsprinting', true);\n\n    for (var i = 0, ii = pagesOverview.length; i < ii; ++i) {\n      composePage(pdfDocument, i + 1, pagesOverview[i], printContainer);\n    }\n  },\n  destroy: function destroy() {\n    this.printContainer.textContent = '';\n    var body = document.querySelector('body');\n    body.removeAttribute('data-pdfjsprinting');\n  }\n};\nPDFPrintServiceFactory.instance = {\n  get supportsPrinting() {\n    var canvas = document.createElement('canvas');\n    var value = 'mozPrintCallback' in canvas;\n    return shadow(this, 'supportsPrinting', value);\n  },\n\n  createPrintService: function createPrintService(pdfDocument, pagesOverview, printContainer) {\n    return new FirefoxPrintService(pdfDocument, pagesOverview, printContainer);\n  }\n};\nexport { FirefoxPrintService };",null]}