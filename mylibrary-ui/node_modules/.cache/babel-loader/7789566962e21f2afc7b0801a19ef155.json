{"remainingRequest":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/thread-loader/dist/cjs.js!/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/web/pdf_sidebar_resizer.js","dependencies":[{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/web/pdf_sidebar_resizer.js","mtime":1577806166000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { clamp, NullL10n } from './ui_utils';\nvar SIDEBAR_WIDTH_VAR = '--sidebar-width';\nvar SIDEBAR_MIN_WIDTH = 200; // pixels\n\nvar SIDEBAR_RESIZING_CLASS = 'sidebarResizing';\n/**\n * @typedef {Object} PDFSidebarResizerOptions\n * @property {HTMLDivElement} outerContainer - The outer container\n *   (encasing both the viewer and sidebar elements).\n * @property {HTMLDivElement} resizer - The DOM element that can be dragged in\n *   order to adjust the width of the sidebar.\n */\n\nvar PDFSidebarResizer =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {PDFSidebarResizerOptions} options\n   * @param {EventBus} eventBus - The application event bus.\n   * @param {IL10n} l10n - Localization service.\n   */\n  function PDFSidebarResizer(options, eventBus) {\n    var _this = this;\n\n    var l10n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NullL10n;\n\n    _classCallCheck(this, PDFSidebarResizer);\n\n    this.enabled = false;\n    this.isRTL = false;\n    this.sidebarOpen = false;\n    this.doc = document.documentElement;\n    this._width = null;\n    this._outerContainerWidth = null;\n    this._boundEvents = Object.create(null);\n    this.outerContainer = options.outerContainer;\n    this.resizer = options.resizer;\n    this.eventBus = eventBus;\n    this.l10n = l10n;\n\n    if ((typeof PDFJSDev === 'undefined' || !PDFJSDev.test('MOZCENTRAL')) && (typeof CSS === 'undefined' || typeof CSS.supports !== 'function' || !CSS.supports(SIDEBAR_WIDTH_VAR, \"calc(-1 * \".concat(SIDEBAR_MIN_WIDTH, \"px)\")))) {\n      console.warn('PDFSidebarResizer: ' + 'The browser does not support resizing of the sidebar.');\n      return;\n    }\n\n    this.enabled = true;\n    this.resizer.classList.remove('hidden'); // Show the resizer DOM element.\n\n    this.l10n.getDirection().then(function (dir) {\n      _this.isRTL = dir === 'rtl';\n    });\n\n    this._addEventListeners();\n  }\n  /**\n   * @type {number}\n   */\n\n\n  _createClass(PDFSidebarResizer, [{\n    key: \"_updateWidth\",\n\n    /**\n     * @private\n     * returns {boolean} Indicating if the sidebar width was updated.\n     */\n    value: function _updateWidth() {\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (!this.enabled) {\n        return false;\n      } // Prevent the sidebar from becoming too narrow, or from occupying more\n      // than half of the available viewer width.\n\n\n      var newWidth = clamp(width, SIDEBAR_MIN_WIDTH, Math.floor(this.outerContainerWidth / 2)); // Only update the UI when the sidebar width did in fact change.\n\n      if (newWidth === this._width) {\n        return false;\n      }\n\n      this._width = newWidth;\n      this.doc.style.setProperty(SIDEBAR_WIDTH_VAR, \"\".concat(newWidth, \"px\"));\n      return true;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_mouseMove\",\n    value: function _mouseMove(evt) {\n      var width = evt.clientX; // For sidebar resizing to work correctly in RTL mode, invert the width.\n\n      if (this.isRTL) {\n        width = this.outerContainerWidth - width;\n      }\n\n      this._updateWidth(width);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_mouseUp\",\n    value: function _mouseUp(evt) {\n      // Re-enable the `transition-duration` rules when sidebar resizing ends...\n      this.outerContainer.classList.remove(SIDEBAR_RESIZING_CLASS); // ... and ensure that rendering will always be triggered.\n\n      this.eventBus.dispatch('resize', {\n        source: this\n      });\n      var _boundEvents = this._boundEvents;\n      window.removeEventListener('mousemove', _boundEvents.mouseMove);\n      window.removeEventListener('mouseup', _boundEvents.mouseUp);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_addEventListeners\",\n    value: function _addEventListeners() {\n      var _this2 = this;\n\n      if (!this.enabled) {\n        return;\n      }\n\n      var _boundEvents = this._boundEvents;\n      _boundEvents.mouseMove = this._mouseMove.bind(this);\n      _boundEvents.mouseUp = this._mouseUp.bind(this);\n      this.resizer.addEventListener('mousedown', function (evt) {\n        if (evt.button !== 0) {\n          return;\n        } // Disable the `transition-duration` rules when sidebar resizing begins,\n        // in order to improve responsiveness and to avoid visual glitches.\n\n\n        _this2.outerContainer.classList.add(SIDEBAR_RESIZING_CLASS);\n\n        window.addEventListener('mousemove', _boundEvents.mouseMove);\n        window.addEventListener('mouseup', _boundEvents.mouseUp);\n      });\n      this.eventBus.on('sidebarviewchanged', function (evt) {\n        _this2.sidebarOpen = !!(evt && evt.view);\n      });\n      this.eventBus.on('resize', function (evt) {\n        // When the *entire* viewer is resized, such that it becomes narrower,\n        // ensure that the sidebar doesn't end up being too wide.\n        if (!evt || evt.source !== window) {\n          return;\n        } // Always reset the cached width when the viewer is resized.\n\n\n        _this2._outerContainerWidth = null;\n\n        if (!_this2._width) {\n          // The sidebar hasn't been resized, hence no need to adjust its width.\n          return;\n        } // NOTE: If the sidebar is closed, we don't need to worry about\n        //       visual glitches nor ensure that rendering is triggered.\n\n\n        if (!_this2.sidebarOpen) {\n          _this2._updateWidth(_this2._width);\n\n          return;\n        }\n\n        _this2.outerContainer.classList.add(SIDEBAR_RESIZING_CLASS);\n\n        var updated = _this2._updateWidth(_this2._width);\n\n        Promise.resolve().then(function () {\n          _this2.outerContainer.classList.remove(SIDEBAR_RESIZING_CLASS); // Trigger rendering if the sidebar width changed, to avoid\n          // depending on the order in which 'resize' events are handled.\n\n\n          if (updated) {\n            _this2.eventBus.dispatch('resize', {\n              source: _this2\n            });\n          }\n        });\n      });\n    }\n  }, {\n    key: \"outerContainerWidth\",\n    get: function get() {\n      if (!this._outerContainerWidth) {\n        this._outerContainerWidth = this.outerContainer.clientWidth;\n      }\n\n      return this._outerContainerWidth;\n    }\n  }]);\n\n  return PDFSidebarResizer;\n}();\n\nexport { PDFSidebarResizer };",null]}