{"remainingRequest":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/thread-loader/dist/cjs.js!/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/weizhang/JAVASHOP/mylibrary-ui/src/module/viewer/page/txt.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/src/module/viewer/page/txt.vue","mtime":1578067146000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from 'vue';\nimport { mapState } from 'vuex';\nimport axios from 'axios';\nimport localEvent from '@/store/local';\nimport TopNav from '../component/TopNav';\nimport BottomNav from '../component/BottomNav';\nimport FontNav from '../component/FontNav'; //   import ListPanel from '../component/ListPanel';\n\nimport Cover from '../component/Cover';\nimport Loading from '../component/Loading';\nexport default {\n  data: function data() {\n    return {\n      bar: false,\n      timer: null,\n      title: '',\n      content: [],\n      loading: false,\n      showList: false,\n      booksReadInfo: {}\n    };\n  },\n  components: {\n    TopNav: TopNav,\n    BottomNav: BottomNav,\n    FontNav: FontNav,\n    //      ListPanel,\n    Cover: Cover,\n    Loading: Loading\n  },\n  created: function created() {\n    // //判断本地是否存储了阅读器文字大小\n    // if (localEvent.StorageGetter('fz_size')) {\n    //     this.$store.state.fz_size = localEvent.StorageGetter('fz_size');\n    // }\n    // //判断本地是否存储了阅读器主题色\n    // if (localEvent.StorageGetter('bg_color')) {\n    //     this.$store.state.bg_color = localEvent.StorageGetter('bg_color');\n    // }\n    // //加载时从localStorage中回去所有数据阅读进度\n    // const localBookReaderInfo = localEvent.StorageGetter('bookreaderinfo');\n    // let id = this.$route.params.id;\n    // //当前书籍以前读过并有阅读进度\n    // if (localBookReaderInfo && localBookReaderInfo[id]) {\n    //     this.booksReadInfo = localEvent.StorageGetter('bookreaderinfo');\n    //     //this.getData(id, this.booksReadInfo[id].chapter);\n    //     this.$store.dispatch('curChapter', this.booksReadInfo[id].chapter);\n    // } else {\n    //     //当前书籍没有读过但是localStorage保存了其他书籍进度\n    //     if (localBookReaderInfo) {\n    //         this.booksReadInfo = localBookReaderInfo;\n    //         this.getData(id, 1);\n    //         this.$store.dispatch('curChapter', 1);\n    //     } else {\n    //         //第一次进入阅读\n    //         this.booksReadInfo[id] = {\n    //             book: id,\n    //             chapter: 1,\n    //         };\n    //         this.getData(id, 1);\n    //         this.$store.dispatch('curChapter', 1);\n    //     }\n    // }\n    //第一次进入阅读\n    var id = 1;\n    this.booksReadInfo[id] = {\n      book: id,\n      chapter: 1\n    };\n    this.getData(id, 1);\n    this.$store.dispatch('curChapter', 1);\n  },\n  mounted: function mounted() {\n    //因为要获取dom元素，所以不能放到created中\n    this.$refs.fz_size.style.fontSize = this.fz_size + 'px';\n  },\n  methods: {\n    //切换上下工具栏，如果字体面板显示点击也关闭\n    clickBar: function clickBar() {\n      this.$store.dispatch('toggleBar');\n      this.$store.state.font_panel = false;\n    },\n    //向上翻页\n    pageUp: function pageUp() {\n      var target = document.body.scrollTop - window.screen.height - 80;\n      this.startScroll(target, -20);\n    },\n    //向下翻页\n    pageDown: function pageDown() {\n      var target = document.body.scrollTop + window.screen.height - 80;\n      this.startScroll(target, 20);\n    },\n    startScroll: function startScroll(target, speed) {\n      var times = null;\n      times = setInterval(function () {\n        if (speed > 0) {\n          if (document.body.scrollTop <= target) {\n            document.body.scrollTop += speed;\n          }\n\n          if (document.body.scrollTop > target || document.body.scrollTop + window.screen.height >= document.body.scrollHeight) {\n            clearInterval(times);\n          }\n        } else {\n          if (document.body.scrollTop >= target) {\n            document.body.scrollTop += speed;\n          }\n\n          if (document.body.scrollTop < target || document.body.scrollTop <= 0) {\n            clearInterval(times);\n          }\n        }\n      }, 1);\n    },\n    getData: function getData(id, chapter) {\n      var _this = this;\n\n      this.loading = true;\n      debugger;\n      axios.get(\"\".concat(this.common.api, \"/book?book=\").concat(id, \"&id=\").concat(chapter)).then(function (data) {\n        _this.loading = false; //获取完毕后隐藏动画\n\n        _this.title = data.data.title;\n        _this.content = data.data.content.split('-');\n      });\n      this.$store.state.windowHeight = window.screen.height;\n    },\n    prevChapter: function prevChapter() {\n      this.$store.dispatch('prevChapter');\n      this.saveBooksInfo();\n      setTimeout(function () {\n        document.body.scrollTop = 0;\n      }, 300);\n    },\n    //更换章节时保存阅读进度到localStorage\n    nextChapter: function nextChapter() {\n      this.$store.dispatch('nextChapter', 50);\n      this.saveBooksInfo();\n      setTimeout(function () {\n        document.body.scrollTop = 0;\n      }, 300);\n    },\n    saveBooksInfo: function saveBooksInfo() {\n      //可用localStorage保存每本小说阅读进度\n      var id = this.$route.params.id;\n      this.booksReadInfo[id] = {\n        book: id,\n        chapter: this.curChapter\n      };\n      localEvent.StorageSetter('bookreaderinfo', this.booksReadInfo);\n    },\n    page: function page(e) {\n      if (e.keyCode === 39) {\n        console.log(this.nextChapter);\n        this.nextChapter();\n      } else if (e.keyCode === 37) {\n        this.prevChapter();\n      }\n    }\n  },\n  computed: _objectSpread({}, mapState(['font_panel', 'bg_color', 'fz_size', 'bg_night', 'curChapter', 'windowHeight', 'list_panel'])),\n  watch: {\n    //监听fz_size的值更改背景色\n    fz_size: function fz_size(val, oldVal) {\n      this.$refs.fz_size.style.fontSize = val + 'px';\n      localEvent.StorageSetter('fz_size', val);\n    },\n    //监听当前章节的改变，保存到本地并获取数据\n    curChapter: function curChapter(val, oldVal) {\n      localEvent.StorageSetter('cur_chapter', val);\n      this.saveBooksInfo();\n      this.getData(this.$route.params.id, val);\n    }\n  }\n};",null]}