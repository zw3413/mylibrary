{"remainingRequest":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/thread-loader/dist/cjs.js!/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/web/pdf_thumbnail_view.js","dependencies":[{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/web/pdf_thumbnail_view.js","mtime":1577806166000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createPromiseCapability, RenderingCancelledException } from 'pdfjs-dist';\nimport { getOutputScale, NullL10n } from './ui_utils';\nimport { RenderingStates } from './pdf_rendering_queue';\nvar MAX_NUM_SCALING_STEPS = 3;\nvar THUMBNAIL_CANVAS_BORDER_WIDTH = 1; // px\n\nvar THUMBNAIL_WIDTH = 98; // px\n\n/**\n * @typedef {Object} PDFThumbnailViewOptions\n * @property {HTMLDivElement} container - The viewer element.\n * @property {number} id - The thumbnail's unique ID (normally its number).\n * @property {PageViewport} defaultViewport - The page viewport.\n * @property {IPDFLinkService} linkService - The navigation/linking service.\n * @property {PDFRenderingQueue} renderingQueue - The rendering queue object.\n * @property {boolean} [disableCanvasToImageConversion] - Don't convert the\n *   canvas thumbnails to images. This prevents `toDataURL` calls, but\n *   increases the overall memory usage. The default value is `false`.\n * @property {IL10n} l10n - Localization service.\n */\n\nvar TempImageFactory = function TempImageFactoryClosure() {\n  var tempCanvasCache = null;\n  return {\n    getCanvas: function getCanvas(width, height) {\n      var tempCanvas = tempCanvasCache;\n\n      if (!tempCanvas) {\n        tempCanvas = document.createElement('canvas');\n        tempCanvasCache = tempCanvas;\n      }\n\n      tempCanvas.width = width;\n      tempCanvas.height = height; // Since this is a temporary canvas, we need to fill it with a white\n      // background ourselves. `_getPageDrawContext` uses CSS rules for this.\n\n      if (typeof PDFJSDev === 'undefined' || PDFJSDev.test('MOZCENTRAL || FIREFOX || GENERIC')) {\n        tempCanvas.mozOpaque = true;\n      }\n\n      var ctx = tempCanvas.getContext('2d', {\n        alpha: false\n      });\n      ctx.save();\n      ctx.fillStyle = 'rgb(255, 255, 255)';\n      ctx.fillRect(0, 0, width, height);\n      ctx.restore();\n      return tempCanvas;\n    },\n    destroyCanvas: function destroyCanvas() {\n      var tempCanvas = tempCanvasCache;\n\n      if (tempCanvas) {\n        // Zeroing the width and height causes Firefox to release graphics\n        // resources immediately, which can greatly reduce memory consumption.\n        tempCanvas.width = 0;\n        tempCanvas.height = 0;\n      }\n\n      tempCanvasCache = null;\n    }\n  };\n}();\n/**\n * @implements {IRenderableView}\n */\n\n\nvar PDFThumbnailView =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {PDFThumbnailViewOptions} options\n   */\n  function PDFThumbnailView(_ref) {\n    var container = _ref.container,\n        id = _ref.id,\n        defaultViewport = _ref.defaultViewport,\n        linkService = _ref.linkService,\n        renderingQueue = _ref.renderingQueue,\n        _ref$disableCanvasToI = _ref.disableCanvasToImageConversion,\n        disableCanvasToImageConversion = _ref$disableCanvasToI === void 0 ? false : _ref$disableCanvasToI,\n        _ref$l10n = _ref.l10n,\n        l10n = _ref$l10n === void 0 ? NullL10n : _ref$l10n;\n\n    _classCallCheck(this, PDFThumbnailView);\n\n    this.id = id;\n    this.renderingId = 'thumbnail' + id;\n    this.pageLabel = null;\n    this.pdfPage = null;\n    this.rotation = 0;\n    this.viewport = defaultViewport;\n    this.pdfPageRotate = defaultViewport.rotation;\n    this.linkService = linkService;\n    this.renderingQueue = renderingQueue;\n    this.renderTask = null;\n    this.renderingState = RenderingStates.INITIAL;\n    this.resume = null;\n    this.disableCanvasToImageConversion = disableCanvasToImageConversion;\n    this.pageWidth = this.viewport.width;\n    this.pageHeight = this.viewport.height;\n    this.pageRatio = this.pageWidth / this.pageHeight;\n    this.canvasWidth = THUMBNAIL_WIDTH;\n    this.canvasHeight = this.canvasWidth / this.pageRatio | 0;\n    this.scale = this.canvasWidth / this.pageWidth;\n    this.l10n = l10n;\n    var anchor = document.createElement('a');\n    anchor.href = linkService.getAnchorUrl('#page=' + id);\n    this.l10n.get('thumb_page_title', {\n      page: id\n    }, 'Page {{page}}').then(function (msg) {\n      anchor.title = msg;\n    });\n\n    anchor.onclick = function () {\n      linkService.page = id;\n      return false;\n    };\n\n    this.anchor = anchor;\n    var div = document.createElement('div');\n    div.className = 'thumbnail';\n    div.setAttribute('data-page-number', this.id);\n    this.div = div;\n    var ring = document.createElement('div');\n    ring.className = 'thumbnailSelectionRing';\n    var borderAdjustment = 2 * THUMBNAIL_CANVAS_BORDER_WIDTH;\n    ring.style.width = this.canvasWidth + borderAdjustment + 'px';\n    ring.style.height = this.canvasHeight + borderAdjustment + 'px';\n    this.ring = ring;\n    div.appendChild(ring);\n    anchor.appendChild(div);\n    container.appendChild(anchor);\n  }\n\n  _createClass(PDFThumbnailView, [{\n    key: \"setPdfPage\",\n    value: function setPdfPage(pdfPage) {\n      this.pdfPage = pdfPage;\n      this.pdfPageRotate = pdfPage.rotate;\n      var totalRotation = (this.rotation + this.pdfPageRotate) % 360;\n      this.viewport = pdfPage.getViewport({\n        scale: 1,\n        rotation: totalRotation\n      });\n      this.reset();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.cancelRendering();\n      this.renderingState = RenderingStates.INITIAL;\n      this.pageWidth = this.viewport.width;\n      this.pageHeight = this.viewport.height;\n      this.pageRatio = this.pageWidth / this.pageHeight;\n      this.canvasHeight = this.canvasWidth / this.pageRatio | 0;\n      this.scale = this.canvasWidth / this.pageWidth;\n      this.div.removeAttribute('data-loaded');\n      var ring = this.ring;\n      var childNodes = ring.childNodes;\n\n      for (var i = childNodes.length - 1; i >= 0; i--) {\n        ring.removeChild(childNodes[i]);\n      }\n\n      var borderAdjustment = 2 * THUMBNAIL_CANVAS_BORDER_WIDTH;\n      ring.style.width = this.canvasWidth + borderAdjustment + 'px';\n      ring.style.height = this.canvasHeight + borderAdjustment + 'px';\n\n      if (this.canvas) {\n        // Zeroing the width and height causes Firefox to release graphics\n        // resources immediately, which can greatly reduce memory consumption.\n        this.canvas.width = 0;\n        this.canvas.height = 0;\n        delete this.canvas;\n      }\n\n      if (this.image) {\n        this.image.removeAttribute('src');\n        delete this.image;\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(rotation) {\n      if (typeof rotation !== 'undefined') {\n        this.rotation = rotation;\n      }\n\n      var totalRotation = (this.rotation + this.pdfPageRotate) % 360;\n      this.viewport = this.viewport.clone({\n        scale: 1,\n        rotation: totalRotation\n      });\n      this.reset();\n    }\n    /**\n     * PLEASE NOTE: Most likely you want to use the `this.reset()` method,\n     *              rather than calling this one directly.\n     */\n\n  }, {\n    key: \"cancelRendering\",\n    value: function cancelRendering() {\n      if (this.renderTask) {\n        this.renderTask.cancel();\n        this.renderTask = null;\n      }\n\n      this.resume = null;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_getPageDrawContext\",\n    value: function _getPageDrawContext() {\n      var noCtxScale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var canvas = document.createElement('canvas'); // Keep the no-thumbnail outline visible, i.e. `data-loaded === false`,\n      // until rendering/image conversion is complete, to avoid display issues.\n\n      this.canvas = canvas;\n\n      if (typeof PDFJSDev === 'undefined' || PDFJSDev.test('MOZCENTRAL || FIREFOX || GENERIC')) {\n        canvas.mozOpaque = true;\n      }\n\n      var ctx = canvas.getContext('2d', {\n        alpha: false\n      });\n      var outputScale = getOutputScale(ctx);\n      canvas.width = this.canvasWidth * outputScale.sx | 0;\n      canvas.height = this.canvasHeight * outputScale.sy | 0;\n      canvas.style.width = this.canvasWidth + 'px';\n      canvas.style.height = this.canvasHeight + 'px';\n\n      if (!noCtxScale && outputScale.scaled) {\n        ctx.scale(outputScale.sx, outputScale.sy);\n      }\n\n      return ctx;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_convertCanvasToImage\",\n    value: function _convertCanvasToImage() {\n      var _this = this;\n\n      if (!this.canvas) {\n        return;\n      }\n\n      if (this.renderingState !== RenderingStates.FINISHED) {\n        return;\n      }\n\n      var id = this.renderingId;\n      var className = 'thumbnailImage';\n\n      if (this.disableCanvasToImageConversion) {\n        this.canvas.id = id;\n        this.canvas.className = className;\n        this.l10n.get('thumb_page_canvas', {\n          page: this.pageId\n        }, 'Thumbnail of Page {{page}}').then(function (msg) {\n          _this.canvas.setAttribute('aria-label', msg);\n        });\n        this.div.setAttribute('data-loaded', true);\n        this.ring.appendChild(this.canvas);\n        return;\n      }\n\n      var image = document.createElement('img');\n      image.id = id;\n      image.className = className;\n      this.l10n.get('thumb_page_canvas', {\n        page: this.pageId\n      }, 'Thumbnail of Page {{page}}').then(function (msg) {\n        image.setAttribute('aria-label', msg);\n      });\n      image.style.width = this.canvasWidth + 'px';\n      image.style.height = this.canvasHeight + 'px';\n      image.src = this.canvas.toDataURL();\n      this.image = image;\n      this.div.setAttribute('data-loaded', true);\n      this.ring.appendChild(image); // Zeroing the width and height causes Firefox to release graphics\n      // resources immediately, which can greatly reduce memory consumption.\n\n      this.canvas.width = 0;\n      this.canvas.height = 0;\n      delete this.canvas;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var _this2 = this;\n\n      if (this.renderingState !== RenderingStates.INITIAL) {\n        console.error('Must be in new state before drawing');\n        return Promise.resolve(undefined);\n      }\n\n      this.renderingState = RenderingStates.RUNNING;\n      var renderCapability = createPromiseCapability();\n\n      var finishRenderTask = function finishRenderTask(error) {\n        // The renderTask may have been replaced by a new one, so only remove\n        // the reference to the renderTask if it matches the one that is\n        // triggering this callback.\n        if (renderTask === _this2.renderTask) {\n          _this2.renderTask = null;\n        }\n\n        if (error instanceof RenderingCancelledException) {\n          renderCapability.resolve(undefined);\n          return;\n        }\n\n        _this2.renderingState = RenderingStates.FINISHED;\n\n        _this2._convertCanvasToImage();\n\n        if (!error) {\n          renderCapability.resolve(undefined);\n        } else {\n          renderCapability.reject(error);\n        }\n      };\n\n      var ctx = this._getPageDrawContext();\n\n      var drawViewport = this.viewport.clone({\n        scale: this.scale\n      });\n\n      var renderContinueCallback = function renderContinueCallback(cont) {\n        if (!_this2.renderingQueue.isHighestPriority(_this2)) {\n          _this2.renderingState = RenderingStates.PAUSED;\n\n          _this2.resume = function () {\n            _this2.renderingState = RenderingStates.RUNNING;\n            cont();\n          };\n\n          return;\n        }\n\n        cont();\n      };\n\n      var renderContext = {\n        canvasContext: ctx,\n        viewport: drawViewport\n      };\n      var renderTask = this.renderTask = this.pdfPage.render(renderContext);\n      renderTask.onContinue = renderContinueCallback;\n      renderTask.promise.then(function () {\n        finishRenderTask(null);\n      }, function (error) {\n        finishRenderTask(error);\n      });\n      return renderCapability.promise;\n    }\n  }, {\n    key: \"setImage\",\n    value: function setImage(pageView) {\n      if (this.renderingState !== RenderingStates.INITIAL) {\n        return;\n      }\n\n      var img = pageView.canvas;\n\n      if (!img) {\n        return;\n      }\n\n      if (!this.pdfPage) {\n        this.setPdfPage(pageView.pdfPage);\n      }\n\n      this.renderingState = RenderingStates.FINISHED;\n\n      var ctx = this._getPageDrawContext(true);\n\n      var canvas = ctx.canvas;\n\n      if (img.width <= 2 * canvas.width) {\n        ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, canvas.width, canvas.height);\n\n        this._convertCanvasToImage();\n\n        return;\n      } // drawImage does an awful job of rescaling the image, doing it gradually.\n\n\n      var reducedWidth = canvas.width << MAX_NUM_SCALING_STEPS;\n      var reducedHeight = canvas.height << MAX_NUM_SCALING_STEPS;\n      var reducedImage = TempImageFactory.getCanvas(reducedWidth, reducedHeight);\n      var reducedImageCtx = reducedImage.getContext('2d');\n\n      while (reducedWidth > img.width || reducedHeight > img.height) {\n        reducedWidth >>= 1;\n        reducedHeight >>= 1;\n      }\n\n      reducedImageCtx.drawImage(img, 0, 0, img.width, img.height, 0, 0, reducedWidth, reducedHeight);\n\n      while (reducedWidth > 2 * canvas.width) {\n        reducedImageCtx.drawImage(reducedImage, 0, 0, reducedWidth, reducedHeight, 0, 0, reducedWidth >> 1, reducedHeight >> 1);\n        reducedWidth >>= 1;\n        reducedHeight >>= 1;\n      }\n\n      ctx.drawImage(reducedImage, 0, 0, reducedWidth, reducedHeight, 0, 0, canvas.width, canvas.height);\n\n      this._convertCanvasToImage();\n    }\n  }, {\n    key: \"setPageLabel\",\n\n    /**\n     * @param {string|null} label\n     */\n    value: function setPageLabel(label) {\n      var _this3 = this;\n\n      this.pageLabel = typeof label === 'string' ? label : null;\n      this.l10n.get('thumb_page_title', {\n        page: this.pageId\n      }, 'Page {{page}}').then(function (msg) {\n        _this3.anchor.title = msg;\n      });\n\n      if (this.renderingState !== RenderingStates.FINISHED) {\n        return;\n      }\n\n      this.l10n.get('thumb_page_canvas', {\n        page: this.pageId\n      }, 'Thumbnail of Page {{page}}').then(function (ariaLabel) {\n        if (_this3.image) {\n          _this3.image.setAttribute('aria-label', ariaLabel);\n        } else if (_this3.disableCanvasToImageConversion && _this3.canvas) {\n          _this3.canvas.setAttribute('aria-label', ariaLabel);\n        }\n      });\n    }\n  }, {\n    key: \"pageId\",\n    get: function get() {\n      return this.pageLabel !== null ? this.pageLabel : this.id;\n    }\n  }], [{\n    key: \"cleanup\",\n    value: function cleanup() {\n      TempImageFactory.destroyCanvas();\n    }\n  }]);\n\n  return PDFThumbnailView;\n}();\n\nexport { PDFThumbnailView };",null]}