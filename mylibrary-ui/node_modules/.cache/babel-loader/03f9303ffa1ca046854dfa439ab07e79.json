{"remainingRequest":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/thread-loader/dist/cjs.js!/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/web/password_prompt.js","dependencies":[{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/src/statics/viewer/pdf/web/password_prompt.js","mtime":1577806166000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/mylibrary-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NullL10n } from './ui_utils';\nimport { PasswordResponses } from 'pdfjs-dist';\n/**\n * @typedef {Object} PasswordPromptOptions\n * @property {string} overlayName - Name of the overlay for the overlay manager.\n * @property {HTMLDivElement} container - Div container for the overlay.\n * @property {HTMLParagraphElement} label - Label containing instructions for\n *                                          entering the password.\n * @property {HTMLInputElement} input - Input field for entering the password.\n * @property {HTMLButtonElement} submitButton - Button for submitting the\n *                                              password.\n * @property {HTMLButtonElement} cancelButton - Button for cancelling password\n *                                              entry.\n */\n\nvar PasswordPrompt =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {PasswordPromptOptions} options\n   * @param {OverlayManager} overlayManager - Manager for the viewer overlays.\n   * @param {IL10n} l10n - Localization service.\n   */\n  function PasswordPrompt(options, overlayManager) {\n    var _this = this;\n\n    var l10n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NullL10n;\n\n    _classCallCheck(this, PasswordPrompt);\n\n    this.overlayName = options.overlayName;\n    this.container = options.container;\n    this.label = options.label;\n    this.input = options.input;\n    this.submitButton = options.submitButton;\n    this.cancelButton = options.cancelButton;\n    this.overlayManager = overlayManager;\n    this.l10n = l10n;\n    this.updateCallback = null;\n    this.reason = null; // Attach the event listeners.\n\n    this.submitButton.addEventListener('click', this.verify.bind(this));\n    this.cancelButton.addEventListener('click', this.close.bind(this));\n    this.input.addEventListener('keydown', function (e) {\n      if (e.keyCode === 13) {\n        // Enter key\n        _this.verify();\n      }\n    });\n    this.overlayManager.register(this.overlayName, this.container, this.close.bind(this), true);\n  }\n\n  _createClass(PasswordPrompt, [{\n    key: \"open\",\n    value: function open() {\n      var _this2 = this;\n\n      this.overlayManager.open(this.overlayName).then(function () {\n        _this2.input.focus();\n\n        var promptString;\n\n        if (_this2.reason === PasswordResponses.INCORRECT_PASSWORD) {\n          promptString = _this2.l10n.get('password_invalid', null, 'Invalid password. Please try again.');\n        } else {\n          promptString = _this2.l10n.get('password_label', null, 'Enter the password to open this PDF file.');\n        }\n\n        promptString.then(function (msg) {\n          _this2.label.textContent = msg;\n        });\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this3 = this;\n\n      this.overlayManager.close(this.overlayName).then(function () {\n        _this3.input.value = '';\n      });\n    }\n  }, {\n    key: \"verify\",\n    value: function verify() {\n      var password = this.input.value;\n\n      if (password && password.length > 0) {\n        this.close();\n        this.updateCallback(password);\n      }\n    }\n  }, {\n    key: \"setUpdateCallback\",\n    value: function setUpdateCallback(updateCallback, reason) {\n      this.updateCallback = updateCallback;\n      this.reason = reason;\n    }\n  }]);\n\n  return PasswordPrompt;\n}();\n\nexport { PasswordPrompt };",null]}