{"remainingRequest":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/vue-admin-template-master/src/statics/viewer/pdf/web/pdf_find_controller.js","dependencies":[{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/src/statics/viewer/pdf/web/pdf_find_controller.js","mtime":1577806166000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PDFFindController = exports.FindState = void 0;\n\nvar _ui_utils = require(\"./ui_utils\");\n\nvar _pdfjsDist = require(\"pdfjs-dist\");\n\nvar _pdf_find_utils = require(\"./pdf_find_utils\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar FindState = {\n  FOUND: 0,\n  NOT_FOUND: 1,\n  WRAPPED: 2,\n  PENDING: 3\n};\nexports.FindState = FindState;\nvar FIND_TIMEOUT = 250; // ms\n\nvar MATCH_SCROLL_OFFSET_TOP = -50; // px\n\nvar MATCH_SCROLL_OFFSET_LEFT = -400; // px\n\nvar CHARACTERS_TO_NORMALIZE = {\n  \"\\u2018\": '\\'',\n  // Left single quotation mark\n  \"\\u2019\": '\\'',\n  // Right single quotation mark\n  \"\\u201A\": '\\'',\n  // Single low-9 quotation mark\n  \"\\u201B\": '\\'',\n  // Single high-reversed-9 quotation mark\n  \"\\u201C\": '\"',\n  // Left double quotation mark\n  \"\\u201D\": '\"',\n  // Right double quotation mark\n  \"\\u201E\": '\"',\n  // Double low-9 quotation mark\n  \"\\u201F\": '\"',\n  // Double high-reversed-9 quotation mark\n  \"\\xBC\": '1/4',\n  // Vulgar fraction one quarter\n  \"\\xBD\": '1/2',\n  // Vulgar fraction one half\n  \"\\xBE\": '3/4' // Vulgar fraction three quarters\n\n};\nvar normalizationRegex = null;\n\nfunction normalize(text) {\n  if (!normalizationRegex) {\n    // Compile the regular expression for text normalization once.\n    var replace = Object.keys(CHARACTERS_TO_NORMALIZE).join('');\n    normalizationRegex = new RegExp(\"[\".concat(replace, \"]\"), 'g');\n  }\n\n  return text.replace(normalizationRegex, function (ch) {\n    return CHARACTERS_TO_NORMALIZE[ch];\n  });\n}\n/**\n * @typedef {Object} PDFFindControllerOptions\n * @property {IPDFLinkService} linkService - The navigation/linking service.\n * @property {EventBus} eventBus - The application event bus.\n */\n\n/**\n * Provides search functionality to find a given string in a PDF document.\n */\n\n\nvar PDFFindController =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {PDFFindControllerOptions} options\n   */\n  function PDFFindController(_ref) {\n    var linkService = _ref.linkService,\n        _ref$eventBus = _ref.eventBus,\n        eventBus = _ref$eventBus === void 0 ? (0, _ui_utils.getGlobalEventBus)() : _ref$eventBus;\n\n    _classCallCheck(this, PDFFindController);\n\n    this._linkService = linkService;\n    this._eventBus = eventBus;\n\n    this._reset();\n\n    eventBus.on('findbarclose', this._onFindBarClose.bind(this));\n  }\n\n  _createClass(PDFFindController, [{\n    key: \"setDocument\",\n\n    /**\n     * Set a reference to the PDF document in order to search it.\n     * Note that searching is not possible if this method is not called.\n     *\n     * @param {PDFDocumentProxy} pdfDocument - The PDF document to search.\n     */\n    value: function setDocument(pdfDocument) {\n      if (this._pdfDocument) {\n        this._reset();\n      }\n\n      if (!pdfDocument) {\n        return;\n      }\n\n      this._pdfDocument = pdfDocument;\n\n      this._firstPageCapability.resolve();\n    }\n  }, {\n    key: \"executeCommand\",\n    value: function executeCommand(cmd, state) {\n      var _this = this;\n\n      if (!state) {\n        return;\n      }\n\n      var pdfDocument = this._pdfDocument;\n\n      if (this._state === null || this._shouldDirtyMatch(cmd, state)) {\n        this._dirtyMatch = true;\n      }\n\n      this._state = state;\n\n      if (cmd !== 'findhighlightallchange') {\n        this._updateUIState(FindState.PENDING);\n      }\n\n      this._firstPageCapability.promise.then(function () {\n        // If the document was closed before searching began, or if the search\n        // operation was relevant for a previously opened document, do nothing.\n        if (!_this._pdfDocument || pdfDocument && _this._pdfDocument !== pdfDocument) {\n          return;\n        }\n\n        _this._extractText();\n\n        var findbarClosed = !_this._highlightMatches;\n        var pendingTimeout = !!_this._findTimeout;\n\n        if (_this._findTimeout) {\n          clearTimeout(_this._findTimeout);\n          _this._findTimeout = null;\n        }\n\n        if (cmd === 'find') {\n          // Trigger the find action with a small delay to avoid starting the\n          // search when the user is still typing (saving resources).\n          _this._findTimeout = setTimeout(function () {\n            _this._nextMatch();\n\n            _this._findTimeout = null;\n          }, FIND_TIMEOUT);\n        } else if (_this._dirtyMatch) {\n          // Immediately trigger searching for non-'find' operations, when the\n          // current state needs to be reset and matches re-calculated.\n          _this._nextMatch();\n        } else if (cmd === 'findagain') {\n          _this._nextMatch(); // When the findbar was previously closed, and `highlightAll` is set,\n          // ensure that the matches on all active pages are highlighted again.\n\n\n          if (findbarClosed && _this._state.highlightAll) {\n            _this._updateAllPages();\n          }\n        } else if (cmd === 'findhighlightallchange') {\n          // If there was a pending search operation, synchronously trigger a new\n          // search *first* to ensure that the correct matches are highlighted.\n          if (pendingTimeout) {\n            _this._nextMatch();\n          } else {\n            _this._highlightMatches = true;\n          }\n\n          _this._updateAllPages(); // Update the highlighting on all active pages.\n\n        } else {\n          _this._nextMatch();\n        }\n      });\n    }\n  }, {\n    key: \"scrollMatchIntoView\",\n    value: function scrollMatchIntoView(_ref2) {\n      var _ref2$element = _ref2.element,\n          element = _ref2$element === void 0 ? null : _ref2$element,\n          _ref2$pageIndex = _ref2.pageIndex,\n          pageIndex = _ref2$pageIndex === void 0 ? -1 : _ref2$pageIndex,\n          _ref2$matchIndex = _ref2.matchIndex,\n          matchIndex = _ref2$matchIndex === void 0 ? -1 : _ref2$matchIndex;\n\n      if (!this._scrollMatches || !element) {\n        return;\n      } else if (matchIndex === -1 || matchIndex !== this._selected.matchIdx) {\n        return;\n      } else if (pageIndex === -1 || pageIndex !== this._selected.pageIdx) {\n        return;\n      }\n\n      this._scrollMatches = false; // Ensure that scrolling only happens once.\n\n      var spot = {\n        top: MATCH_SCROLL_OFFSET_TOP,\n        left: MATCH_SCROLL_OFFSET_LEFT\n      };\n      (0, _ui_utils.scrollIntoView)(element, spot,\n      /* skipOverflowHiddenElements = */\n      true);\n    }\n  }, {\n    key: \"_reset\",\n    value: function _reset() {\n      this._highlightMatches = false;\n      this._scrollMatches = false;\n      this._pdfDocument = null;\n      this._pageMatches = [];\n      this._pageMatchesLength = [];\n      this._state = null;\n      this._selected = {\n        // Currently selected match.\n        pageIdx: -1,\n        matchIdx: -1\n      };\n      this._offset = {\n        // Where the find algorithm currently is in the document.\n        pageIdx: null,\n        matchIdx: null,\n        wrapped: false\n      };\n      this._extractTextPromises = [];\n      this._pageContents = []; // Stores the normalized text for each page.\n\n      this._matchesCountTotal = 0;\n      this._pagesToSearch = null;\n      this._pendingFindMatches = Object.create(null);\n      this._resumePageIdx = null;\n      this._dirtyMatch = false;\n      clearTimeout(this._findTimeout);\n      this._findTimeout = null;\n      this._firstPageCapability = (0, _pdfjsDist.createPromiseCapability)();\n    }\n    /**\n     * @type {string} The (current) normalized search query.\n     */\n\n  }, {\n    key: \"_shouldDirtyMatch\",\n    value: function _shouldDirtyMatch(cmd, state) {\n      // When the search query changes, regardless of the actual search command\n      // used, always re-calculate matches to avoid errors (fixes bug 1030622).\n      if (state.query !== this._state.query) {\n        return true;\n      }\n\n      switch (cmd) {\n        case 'findagain':\n          var pageNumber = this._selected.pageIdx + 1;\n          var linkService = this._linkService; // Only treat a 'findagain' event as a new search operation when it's\n          // *absolutely* certain that the currently selected match is no longer\n          // visible, e.g. as a result of the user scrolling in the document.\n          //\n          // NOTE: If only a simple `this._linkService.page` check was used here,\n          // there's a risk that consecutive 'findagain' operations could \"skip\"\n          // over matches at the top/bottom of pages thus making them completely\n          // inaccessible when there's multiple pages visible in the viewer.\n\n          if (pageNumber >= 1 && pageNumber <= linkService.pagesCount && pageNumber !== linkService.page && !linkService.isPageVisible(pageNumber)) {\n            return true;\n          }\n\n          return false;\n\n        case 'findhighlightallchange':\n          return false;\n      }\n\n      return true;\n    }\n    /**\n     * Helper for multi-term search that fills the `matchesWithLength` array\n     * and handles cases where one search term includes another search term (for\n     * example, \"tamed tame\" or \"this is\"). It looks for intersecting terms in\n     * the `matches` and keeps elements with a longer match length.\n     */\n\n  }, {\n    key: \"_prepareMatches\",\n    value: function _prepareMatches(matchesWithLength, matches, matchesLength) {\n      function isSubTerm(matchesWithLength, currentIndex) {\n        var currentElem = matchesWithLength[currentIndex];\n        var nextElem = matchesWithLength[currentIndex + 1]; // Check for cases like \"TAMEd TAME\".\n\n        if (currentIndex < matchesWithLength.length - 1 && currentElem.match === nextElem.match) {\n          currentElem.skipped = true;\n          return true;\n        } // Check for cases like \"thIS IS\".\n\n\n        for (var i = currentIndex - 1; i >= 0; i--) {\n          var prevElem = matchesWithLength[i];\n\n          if (prevElem.skipped) {\n            continue;\n          }\n\n          if (prevElem.match + prevElem.matchLength < currentElem.match) {\n            break;\n          }\n\n          if (prevElem.match + prevElem.matchLength >= currentElem.match + currentElem.matchLength) {\n            currentElem.skipped = true;\n            return true;\n          }\n        }\n\n        return false;\n      } // Sort the array of `{ match: <match>, matchLength: <matchLength> }`\n      // objects on increasing index first and on the length otherwise.\n\n\n      matchesWithLength.sort(function (a, b) {\n        return a.match === b.match ? a.matchLength - b.matchLength : a.match - b.match;\n      });\n\n      for (var i = 0, len = matchesWithLength.length; i < len; i++) {\n        if (isSubTerm(matchesWithLength, i)) {\n          continue;\n        }\n\n        matches.push(matchesWithLength[i].match);\n        matchesLength.push(matchesWithLength[i].matchLength);\n      }\n    }\n    /**\n     * Determine if the search query constitutes a \"whole word\", by comparing the\n     * first/last character type with the preceding/following character type.\n     */\n\n  }, {\n    key: \"_isEntireWord\",\n    value: function _isEntireWord(content, startIdx, length) {\n      if (startIdx > 0) {\n        var first = content.charCodeAt(startIdx);\n        var limit = content.charCodeAt(startIdx - 1);\n\n        if ((0, _pdf_find_utils.getCharacterType)(first) === (0, _pdf_find_utils.getCharacterType)(limit)) {\n          return false;\n        }\n      }\n\n      var endIdx = startIdx + length - 1;\n\n      if (endIdx < content.length - 1) {\n        var last = content.charCodeAt(endIdx);\n\n        var _limit = content.charCodeAt(endIdx + 1);\n\n        if ((0, _pdf_find_utils.getCharacterType)(last) === (0, _pdf_find_utils.getCharacterType)(_limit)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_calculatePhraseMatch\",\n    value: function _calculatePhraseMatch(query, pageIndex, pageContent, entireWord) {\n      var matches = [];\n      var queryLen = query.length;\n      var matchIdx = -queryLen;\n\n      while (true) {\n        matchIdx = pageContent.indexOf(query, matchIdx + queryLen);\n\n        if (matchIdx === -1) {\n          break;\n        }\n\n        if (entireWord && !this._isEntireWord(pageContent, matchIdx, queryLen)) {\n          continue;\n        }\n\n        matches.push(matchIdx);\n      }\n\n      this._pageMatches[pageIndex] = matches;\n    }\n  }, {\n    key: \"_calculateWordMatch\",\n    value: function _calculateWordMatch(query, pageIndex, pageContent, entireWord) {\n      var matchesWithLength = []; // Divide the query into pieces and search for text in each piece.\n\n      var queryArray = query.match(/\\S+/g);\n\n      for (var i = 0, len = queryArray.length; i < len; i++) {\n        var subquery = queryArray[i];\n        var subqueryLen = subquery.length;\n        var matchIdx = -subqueryLen;\n\n        while (true) {\n          matchIdx = pageContent.indexOf(subquery, matchIdx + subqueryLen);\n\n          if (matchIdx === -1) {\n            break;\n          }\n\n          if (entireWord && !this._isEntireWord(pageContent, matchIdx, subqueryLen)) {\n            continue;\n          } // Other searches do not, so we store the length.\n\n\n          matchesWithLength.push({\n            match: matchIdx,\n            matchLength: subqueryLen,\n            skipped: false\n          });\n        }\n      } // Prepare arrays for storing the matches.\n\n\n      this._pageMatchesLength[pageIndex] = [];\n      this._pageMatches[pageIndex] = []; // Sort `matchesWithLength`, remove intersecting terms and put the result\n      // into the two arrays.\n\n      this._prepareMatches(matchesWithLength, this._pageMatches[pageIndex], this._pageMatchesLength[pageIndex]);\n    }\n  }, {\n    key: \"_calculateMatch\",\n    value: function _calculateMatch(pageIndex) {\n      var pageContent = this._pageContents[pageIndex];\n      var query = this._query;\n      var _this$_state = this._state,\n          caseSensitive = _this$_state.caseSensitive,\n          entireWord = _this$_state.entireWord,\n          phraseSearch = _this$_state.phraseSearch;\n\n      if (query.length === 0) {\n        // Do nothing: the matches should be wiped out already.\n        return;\n      }\n\n      if (!caseSensitive) {\n        pageContent = pageContent.toLowerCase();\n        query = query.toLowerCase();\n      }\n\n      if (phraseSearch) {\n        this._calculatePhraseMatch(query, pageIndex, pageContent, entireWord);\n      } else {\n        this._calculateWordMatch(query, pageIndex, pageContent, entireWord);\n      } // When `highlightAll` is set, ensure that the matches on previously\n      // rendered (and still active) pages are correctly highlighted.\n\n\n      if (this._state.highlightAll) {\n        this._updatePage(pageIndex);\n      }\n\n      if (this._resumePageIdx === pageIndex) {\n        this._resumePageIdx = null;\n\n        this._nextPageMatch();\n      } // Update the match count.\n\n\n      var pageMatchesCount = this._pageMatches[pageIndex].length;\n\n      if (pageMatchesCount > 0) {\n        this._matchesCountTotal += pageMatchesCount;\n\n        this._updateUIResultsCount();\n      }\n    }\n  }, {\n    key: \"_extractText\",\n    value: function _extractText() {\n      var _this2 = this;\n\n      // Perform text extraction once if this method is called multiple times.\n      if (this._extractTextPromises.length > 0) {\n        return;\n      }\n\n      var promise = Promise.resolve();\n\n      var _loop = function _loop(i, ii) {\n        var extractTextCapability = (0, _pdfjsDist.createPromiseCapability)();\n        _this2._extractTextPromises[i] = extractTextCapability.promise;\n        promise = promise.then(function () {\n          return _this2._pdfDocument.getPage(i + 1).then(function (pdfPage) {\n            return pdfPage.getTextContent({\n              normalizeWhitespace: true\n            });\n          }).then(function (textContent) {\n            var textItems = textContent.items;\n            var strBuf = [];\n\n            for (var j = 0, jj = textItems.length; j < jj; j++) {\n              strBuf.push(textItems[j].str);\n            } // Store the normalized page content (text items) as one string.\n\n\n            _this2._pageContents[i] = normalize(strBuf.join(''));\n            extractTextCapability.resolve(i);\n          }, function (reason) {\n            console.error(\"Unable to get text content for page \".concat(i + 1), reason); // Page error -- assuming no text content.\n\n            _this2._pageContents[i] = '';\n            extractTextCapability.resolve(i);\n          });\n        });\n      };\n\n      for (var i = 0, ii = this._linkService.pagesCount; i < ii; i++) {\n        _loop(i, ii);\n      }\n    }\n  }, {\n    key: \"_updatePage\",\n    value: function _updatePage(index) {\n      if (this._scrollMatches && this._selected.pageIdx === index) {\n        // If the page is selected, scroll the page into view, which triggers\n        // rendering the page, which adds the text layer. Once the text layer\n        // is built, it will attempt to scroll the selected match into view.\n        this._linkService.page = index + 1;\n      }\n\n      this._eventBus.dispatch('updatetextlayermatches', {\n        source: this,\n        pageIndex: index\n      });\n    }\n  }, {\n    key: \"_updateAllPages\",\n    value: function _updateAllPages() {\n      this._eventBus.dispatch('updatetextlayermatches', {\n        source: this,\n        pageIndex: -1\n      });\n    }\n  }, {\n    key: \"_nextMatch\",\n    value: function _nextMatch() {\n      var _this3 = this;\n\n      var previous = this._state.findPrevious;\n      var currentPageIndex = this._linkService.page - 1;\n      var numPages = this._linkService.pagesCount;\n      this._highlightMatches = true;\n\n      if (this._dirtyMatch) {\n        // Need to recalculate the matches, reset everything.\n        this._dirtyMatch = false;\n        this._selected.pageIdx = this._selected.matchIdx = -1;\n        this._offset.pageIdx = currentPageIndex;\n        this._offset.matchIdx = null;\n        this._offset.wrapped = false;\n        this._resumePageIdx = null;\n        this._pageMatches.length = 0;\n        this._pageMatchesLength.length = 0;\n        this._matchesCountTotal = 0;\n\n        this._updateAllPages(); // Wipe out any previously highlighted matches.\n\n\n        for (var i = 0; i < numPages; i++) {\n          // Start finding the matches as soon as the text is extracted.\n          if (this._pendingFindMatches[i] === true) {\n            continue;\n          }\n\n          this._pendingFindMatches[i] = true;\n\n          this._extractTextPromises[i].then(function (pageIdx) {\n            delete _this3._pendingFindMatches[pageIdx];\n\n            _this3._calculateMatch(pageIdx);\n          });\n        }\n      } // If there's no query there's no point in searching.\n\n\n      if (this._query === '') {\n        this._updateUIState(FindState.FOUND);\n\n        return;\n      } // If we're waiting on a page, we return since we can't do anything else.\n\n\n      if (this._resumePageIdx) {\n        return;\n      }\n\n      var offset = this._offset; // Keep track of how many pages we should maximally iterate through.\n\n      this._pagesToSearch = numPages; // If there's already a `matchIdx` that means we are iterating through a\n      // page's matches.\n\n      if (offset.matchIdx !== null) {\n        var numPageMatches = this._pageMatches[offset.pageIdx].length;\n\n        if (!previous && offset.matchIdx + 1 < numPageMatches || previous && offset.matchIdx > 0) {\n          // The simple case; we just have advance the matchIdx to select\n          // the next match on the page.\n          offset.matchIdx = previous ? offset.matchIdx - 1 : offset.matchIdx + 1;\n\n          this._updateMatch(\n          /* found = */\n          true);\n\n          return;\n        } // We went beyond the current page's matches, so we advance to\n        // the next page.\n\n\n        this._advanceOffsetPage(previous);\n      } // Start searching through the page.\n\n\n      this._nextPageMatch();\n    }\n  }, {\n    key: \"_matchesReady\",\n    value: function _matchesReady(matches) {\n      var offset = this._offset;\n      var numMatches = matches.length;\n      var previous = this._state.findPrevious;\n\n      if (numMatches) {\n        // There were matches for the page, so initialize `matchIdx`.\n        offset.matchIdx = previous ? numMatches - 1 : 0;\n\n        this._updateMatch(\n        /* found = */\n        true);\n\n        return true;\n      } // No matches, so attempt to search the next page.\n\n\n      this._advanceOffsetPage(previous);\n\n      if (offset.wrapped) {\n        offset.matchIdx = null;\n\n        if (this._pagesToSearch < 0) {\n          // No point in wrapping again, there were no matches.\n          this._updateMatch(\n          /* found = */\n          false); // While matches were not found, searching for a page\n          // with matches should nevertheless halt.\n\n\n          return true;\n        }\n      } // Matches were not found (and searching is not done).\n\n\n      return false;\n    }\n  }, {\n    key: \"_nextPageMatch\",\n    value: function _nextPageMatch() {\n      if (this._resumePageIdx !== null) {\n        console.error('There can only be one pending page.');\n      }\n\n      var matches = null;\n\n      do {\n        var pageIdx = this._offset.pageIdx;\n        matches = this._pageMatches[pageIdx];\n\n        if (!matches) {\n          // The matches don't exist yet for processing by `_matchesReady`,\n          // so set a resume point for when they do exist.\n          this._resumePageIdx = pageIdx;\n          break;\n        }\n      } while (!this._matchesReady(matches));\n    }\n  }, {\n    key: \"_advanceOffsetPage\",\n    value: function _advanceOffsetPage(previous) {\n      var offset = this._offset;\n      var numPages = this._linkService.pagesCount;\n      offset.pageIdx = previous ? offset.pageIdx - 1 : offset.pageIdx + 1;\n      offset.matchIdx = null;\n      this._pagesToSearch--;\n\n      if (offset.pageIdx >= numPages || offset.pageIdx < 0) {\n        offset.pageIdx = previous ? numPages - 1 : 0;\n        offset.wrapped = true;\n      }\n    }\n  }, {\n    key: \"_updateMatch\",\n    value: function _updateMatch() {\n      var found = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var state = FindState.NOT_FOUND;\n      var wrapped = this._offset.wrapped;\n      this._offset.wrapped = false;\n\n      if (found) {\n        var previousPage = this._selected.pageIdx;\n        this._selected.pageIdx = this._offset.pageIdx;\n        this._selected.matchIdx = this._offset.matchIdx;\n        state = wrapped ? FindState.WRAPPED : FindState.FOUND; // Update the currently selected page to wipe out any selected matches.\n\n        if (previousPage !== -1 && previousPage !== this._selected.pageIdx) {\n          this._updatePage(previousPage);\n        }\n      }\n\n      this._updateUIState(state, this._state.findPrevious);\n\n      if (this._selected.pageIdx !== -1) {\n        // Ensure that the match will be scrolled into view.\n        this._scrollMatches = true;\n\n        this._updatePage(this._selected.pageIdx);\n      }\n    }\n  }, {\n    key: \"_onFindBarClose\",\n    value: function _onFindBarClose(evt) {\n      var _this4 = this;\n\n      var pdfDocument = this._pdfDocument; // Since searching is asynchronous, ensure that the removal of highlighted\n      // matches (from the UI) is async too such that the 'updatetextlayermatches'\n      // events will always be dispatched in the expected order.\n\n      this._firstPageCapability.promise.then(function () {\n        // Only update the UI if the document is open, and is the current one.\n        if (!_this4._pdfDocument || pdfDocument && _this4._pdfDocument !== pdfDocument) {\n          return;\n        } // Ensure that a pending, not yet started, search operation is aborted.\n\n\n        if (_this4._findTimeout) {\n          clearTimeout(_this4._findTimeout);\n          _this4._findTimeout = null;\n        } // Abort any long running searches, to avoid a match being scrolled into\n        // view *after* the findbar has been closed. In this case `this._offset`\n        // will most likely differ from `this._selected`, hence we also ensure\n        // that any new search operation will always start with a clean slate.\n\n\n        if (_this4._resumePageIdx) {\n          _this4._resumePageIdx = null;\n          _this4._dirtyMatch = true;\n        } // Avoid the UI being in a pending state when the findbar is re-opened.\n\n\n        _this4._updateUIState(FindState.FOUND);\n\n        _this4._highlightMatches = false;\n\n        _this4._updateAllPages(); // Wipe out any previously highlighted matches.\n\n      });\n    }\n  }, {\n    key: \"_requestMatchesCount\",\n    value: function _requestMatchesCount() {\n      var _this$_selected = this._selected,\n          pageIdx = _this$_selected.pageIdx,\n          matchIdx = _this$_selected.matchIdx;\n      var current = 0,\n          total = this._matchesCountTotal;\n\n      if (matchIdx !== -1) {\n        for (var i = 0; i < pageIdx; i++) {\n          current += this._pageMatches[i] && this._pageMatches[i].length || 0;\n        }\n\n        current += matchIdx + 1;\n      } // When searching starts, this method may be called before the `pageMatches`\n      // have been counted (in `_calculateMatch`). Ensure that the UI won't show\n      // temporarily broken state when the active find result doesn't make sense.\n\n\n      if (current < 1 || current > total) {\n        current = total = 0;\n      }\n\n      return {\n        current: current,\n        total: total\n      };\n    }\n  }, {\n    key: \"_updateUIResultsCount\",\n    value: function _updateUIResultsCount() {\n      this._eventBus.dispatch('updatefindmatchescount', {\n        source: this,\n        matchesCount: this._requestMatchesCount()\n      });\n    }\n  }, {\n    key: \"_updateUIState\",\n    value: function _updateUIState(state, previous) {\n      this._eventBus.dispatch('updatefindcontrolstate', {\n        source: this,\n        state: state,\n        previous: previous,\n        matchesCount: this._requestMatchesCount()\n      });\n    }\n  }, {\n    key: \"highlightMatches\",\n    get: function get() {\n      return this._highlightMatches;\n    }\n  }, {\n    key: \"pageMatches\",\n    get: function get() {\n      return this._pageMatches;\n    }\n  }, {\n    key: \"pageMatchesLength\",\n    get: function get() {\n      return this._pageMatchesLength;\n    }\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selected;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._state;\n    }\n  }, {\n    key: \"_query\",\n    get: function get() {\n      if (this._state.query !== this._rawQuery) {\n        this._rawQuery = this._state.query;\n        this._normalizedQuery = normalize(this._state.query);\n      }\n\n      return this._normalizedQuery;\n    }\n  }]);\n\n  return PDFFindController;\n}();\n\nexports.PDFFindController = PDFFindController;",null]}