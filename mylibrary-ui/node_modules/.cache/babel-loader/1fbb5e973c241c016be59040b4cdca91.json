{"remainingRequest":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/babel-loader/lib/index.js!/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/weizhang/JAVASHOP/vue-admin-template-master/src/statics/viewer/pdf/web/pdf_thumbnail_viewer.js","dependencies":[{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/src/statics/viewer/pdf/web/pdf_thumbnail_viewer.js","mtime":1577806166000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PDFThumbnailViewer = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"/Users/weizhang/JAVASHOP/vue-admin-template-master/node_modules/@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _ui_utils = require(\"./ui_utils\");\n\nvar _pdf_thumbnail_view = require(\"./pdf_thumbnail_view\");\n\n/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar THUMBNAIL_SCROLL_MARGIN = -19;\nvar THUMBNAIL_SELECTED_CLASS = 'selected';\n/**\n * @typedef {Object} PDFThumbnailViewerOptions\n * @property {HTMLDivElement} container - The container for the thumbnail\n *   elements.\n * @property {IPDFLinkService} linkService - The navigation/linking service.\n * @property {PDFRenderingQueue} renderingQueue - The rendering queue object.\n * @property {IL10n} l10n - Localization service.\n */\n\n/**\n * Viewer control to display thumbnails for pages in a PDF document.\n *\n * @implements {IRenderableView}\n */\n\nvar PDFThumbnailViewer =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {PDFThumbnailViewerOptions} options\n   */\n  function PDFThumbnailViewer(_ref) {\n    var container = _ref.container,\n        linkService = _ref.linkService,\n        renderingQueue = _ref.renderingQueue,\n        _ref$l10n = _ref.l10n,\n        l10n = _ref$l10n === void 0 ? _ui_utils.NullL10n : _ref$l10n;\n    (0, _classCallCheck2.default)(this, PDFThumbnailViewer);\n    this.container = container;\n    this.linkService = linkService;\n    this.renderingQueue = renderingQueue;\n    this.l10n = l10n;\n    this.scroll = (0, _ui_utils.watchScroll)(this.container, this._scrollUpdated.bind(this));\n\n    this._resetView();\n  }\n  /**\n   * @private\n   */\n\n\n  (0, _createClass2.default)(PDFThumbnailViewer, [{\n    key: \"_scrollUpdated\",\n    value: function _scrollUpdated() {\n      this.renderingQueue.renderHighestPriority();\n    }\n  }, {\n    key: \"getThumbnail\",\n    value: function getThumbnail(index) {\n      return this._thumbnails[index];\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_getVisibleThumbs\",\n    value: function _getVisibleThumbs() {\n      return (0, _ui_utils.getVisibleElements)(this.container, this._thumbnails);\n    }\n  }, {\n    key: \"scrollThumbnailIntoView\",\n    value: function scrollThumbnailIntoView(pageNumber) {\n      if (!this.pdfDocument) {\n        return;\n      }\n\n      var thumbnailView = this._thumbnails[pageNumber - 1];\n\n      if (!thumbnailView) {\n        console.error('scrollThumbnailIntoView: Invalid \"pageNumber\" parameter.');\n        return;\n      }\n\n      if (pageNumber !== this._currentPageNumber) {\n        var prevThumbnailView = this._thumbnails[this._currentPageNumber - 1]; // Remove the highlight from the previous thumbnail...\n\n        prevThumbnailView.div.classList.remove(THUMBNAIL_SELECTED_CLASS); // ... and add the highlight to the new thumbnail.\n\n        thumbnailView.div.classList.add(THUMBNAIL_SELECTED_CLASS);\n      }\n\n      var visibleThumbs = this._getVisibleThumbs();\n\n      var numVisibleThumbs = visibleThumbs.views.length; // If the thumbnail isn't currently visible, scroll it into view.\n\n      if (numVisibleThumbs > 0) {\n        var first = visibleThumbs.first.id; // Account for only one thumbnail being visible.\n\n        var last = numVisibleThumbs > 1 ? visibleThumbs.last.id : first;\n        var shouldScroll = false;\n\n        if (pageNumber <= first || pageNumber >= last) {\n          shouldScroll = true;\n        } else {\n          visibleThumbs.views.some(function (view) {\n            if (view.id !== pageNumber) {\n              return false;\n            }\n\n            shouldScroll = view.percent < 100;\n            return true;\n          });\n        }\n\n        if (shouldScroll) {\n          (0, _ui_utils.scrollIntoView)(thumbnailView.div, {\n            top: THUMBNAIL_SCROLL_MARGIN\n          });\n        }\n      }\n\n      this._currentPageNumber = pageNumber;\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      _pdf_thumbnail_view.PDFThumbnailView.cleanup();\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_resetView\",\n    value: function _resetView() {\n      this._thumbnails = [];\n      this._currentPageNumber = 1;\n      this._pageLabels = null;\n      this._pagesRotation = 0;\n      this._pagesRequests = []; // Remove the thumbnails from the DOM.\n\n      this.container.textContent = '';\n    }\n  }, {\n    key: \"setDocument\",\n    value: function setDocument(pdfDocument) {\n      var _this = this;\n\n      if (this.pdfDocument) {\n        this._cancelRendering();\n\n        this._resetView();\n      }\n\n      this.pdfDocument = pdfDocument;\n\n      if (!pdfDocument) {\n        return;\n      }\n\n      pdfDocument.getPage(1).then(function (firstPage) {\n        var pagesCount = pdfDocument.numPages;\n        var viewport = firstPage.getViewport({\n          scale: 1\n        });\n\n        for (var pageNum = 1; pageNum <= pagesCount; ++pageNum) {\n          var thumbnail = new _pdf_thumbnail_view.PDFThumbnailView({\n            container: _this.container,\n            id: pageNum,\n            defaultViewport: viewport.clone(),\n            linkService: _this.linkService,\n            renderingQueue: _this.renderingQueue,\n            disableCanvasToImageConversion: false,\n            l10n: _this.l10n\n          });\n\n          _this._thumbnails.push(thumbnail);\n        } // Ensure that the current thumbnail is always highlighted on load.\n\n\n        var thumbnailView = _this._thumbnails[_this._currentPageNumber - 1];\n        thumbnailView.div.classList.add(THUMBNAIL_SELECTED_CLASS);\n      }).catch(function (reason) {\n        console.error('Unable to initialize thumbnail viewer', reason);\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_cancelRendering\",\n    value: function _cancelRendering() {\n      for (var i = 0, ii = this._thumbnails.length; i < ii; i++) {\n        if (this._thumbnails[i]) {\n          this._thumbnails[i].cancelRendering();\n        }\n      }\n    }\n    /**\n     * @param {Array|null} labels\n     */\n\n  }, {\n    key: \"setPageLabels\",\n    value: function setPageLabels(labels) {\n      if (!this.pdfDocument) {\n        return;\n      }\n\n      if (!labels) {\n        this._pageLabels = null;\n      } else if (!(Array.isArray(labels) && this.pdfDocument.numPages === labels.length)) {\n        this._pageLabels = null;\n        console.error('PDFThumbnailViewer_setPageLabels: Invalid page labels.');\n      } else {\n        this._pageLabels = labels;\n      } // Update all the `PDFThumbnailView` instances.\n\n\n      for (var i = 0, ii = this._thumbnails.length; i < ii; i++) {\n        var label = this._pageLabels && this._pageLabels[i];\n\n        this._thumbnails[i].setPageLabel(label);\n      }\n    }\n    /**\n     * @param {PDFThumbnailView} thumbView\n     * @returns {PDFPage}\n     * @private\n     */\n\n  }, {\n    key: \"_ensurePdfPageLoaded\",\n    value: function _ensurePdfPageLoaded(thumbView) {\n      var _this2 = this;\n\n      if (thumbView.pdfPage) {\n        return Promise.resolve(thumbView.pdfPage);\n      }\n\n      var pageNumber = thumbView.id;\n\n      if (this._pagesRequests[pageNumber]) {\n        return this._pagesRequests[pageNumber];\n      }\n\n      var promise = this.pdfDocument.getPage(pageNumber).then(function (pdfPage) {\n        thumbView.setPdfPage(pdfPage);\n        _this2._pagesRequests[pageNumber] = null;\n        return pdfPage;\n      }).catch(function (reason) {\n        console.error('Unable to get page for thumb view', reason); // Page error -- there is nothing can be done.\n\n        _this2._pagesRequests[pageNumber] = null;\n      });\n      this._pagesRequests[pageNumber] = promise;\n      return promise;\n    }\n  }, {\n    key: \"forceRendering\",\n    value: function forceRendering() {\n      var _this3 = this;\n\n      var visibleThumbs = this._getVisibleThumbs();\n\n      var thumbView = this.renderingQueue.getHighestPriority(visibleThumbs, this._thumbnails, this.scroll.down);\n\n      if (thumbView) {\n        this._ensurePdfPageLoaded(thumbView).then(function () {\n          _this3.renderingQueue.renderView(thumbView);\n        });\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"pagesRotation\",\n    get: function get() {\n      return this._pagesRotation;\n    },\n    set: function set(rotation) {\n      if (!(0, _ui_utils.isValidRotation)(rotation)) {\n        throw new Error('Invalid thumbnails rotation angle.');\n      }\n\n      if (!this.pdfDocument) {\n        return;\n      }\n\n      if (this._pagesRotation === rotation) {\n        return; // The rotation didn't change.\n      }\n\n      this._pagesRotation = rotation;\n\n      for (var i = 0, ii = this._thumbnails.length; i < ii; i++) {\n        this._thumbnails[i].update(rotation);\n      }\n    }\n  }]);\n  return PDFThumbnailViewer;\n}();\n\nexports.PDFThumbnailViewer = PDFThumbnailViewer;",null]}